{"tags":[{"name":"JavaScript Web Applications","permalink":"http://blog.hellolc.com/tags/JavaScript-Web-Applications/","url":"/async/tags/JavaScript Web Applications.json","count":2}],"categories":[],"url":"/async/posts/2018/01/14/MVCAndClasses.json","date":1515917511000,"path":{"year":2018,"month":1,"day":14,"name":"MVCAndClasses"},"title":"MVCandClasses","permalink":"http://blog.hellolc.com/2018/01/14/MVCAndClasses/","content":"<h2 id=\"What-Is-MVC\"><a href=\"#What-Is-MVC\" class=\"headerlink\" title=\"What Is MVC?\"></a>What Is MVC?</h2><h3 id=\"The-Model\"><a href=\"#The-Model\" class=\"headerlink\" title=\"The Model\"></a>The Model</h3><p>主要存储对象数据的地方</p>\n<p>因为是面向对象编程, 因此我们任何数据被model对象封装后, 都可以直接调用其方法, 而不依赖全局方法, 这样可以减少很多全局方法冲突<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用全局变量的方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = users[<span class=\"string\">\"foo\"</span>]; </span><br><span class=\"line\">destroyUser(user);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//建议封装为如下</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = User.find(<span class=\"string\">\"foo\"</span>); </span><br><span class=\"line\">user.destroy();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"The-View\"><a href=\"#The-View\" class=\"headerlink\" title=\"The View\"></a>The View</h3><p>主要是展示页面, 和其他逻辑解耦</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// helper.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> helper = &#123;&#125;;</span><br><span class=\"line\">helper.formatDate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/* ... */</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// template.html </span></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    $&#123; helper.formatDate(<span class=\"keyword\">this</span>.date) &#125; </span><br><span class=\"line\">&lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"The-Controller\"><a href=\"#The-Controller\" class=\"headerlink\" title=\"The Controller\"></a>The Controller</h3><p>controller是model和view的中间粘合剂, 它从view中获取events和input, 再从model中获取相应数据, 返回给view展示</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Use a anonymous function to enscapulate scope </span></span><br><span class=\"line\">(Controller.users = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nameClick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// Attach event listeners on page load $(function()&#123;</span></span><br><span class=\"line\">$(<span class=\"string\">\"#view .name\"</span>).click(nameClick); &#125;);</span><br><span class=\"line\">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Toward-Modularity-Creating-Classes\"><a href=\"#Toward-Modularity-Creating-Classes\" class=\"headerlink\" title=\"Toward Modularity, Creating Classes\"></a>Toward Modularity, Creating Classes</h2><p>js中的class是用原型链模拟的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Class = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">parent</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> klass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.init.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (parent) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> subClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">          subClass.prototype = parent.prototype;</span><br><span class=\"line\">          klass.prototype = <span class=\"keyword\">new</span> subClass();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      klass.fn = klass.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\">      klass.fn.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      klass.fn.parent = klass;</span><br><span class=\"line\"></span><br><span class=\"line\">      klass.fn._super = klass.__proto__;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Adding a proxy function </span></span><br><span class=\"line\">      klass.proxy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>; </span><br><span class=\"line\">        <span class=\"keyword\">return</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func.apply(self, <span class=\"built_in\">arguments</span>); </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// Add the function on instances too </span></span><br><span class=\"line\">      klass.fn.proxy = klass.proxy;  </span><br><span class=\"line\"></span><br><span class=\"line\">      klass.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">              klass[i] = obj[i];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      klass.include = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">              klass.prototype[i] = obj[i];</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> klass;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Animal = <span class=\"keyword\">new</span> Class;</span><br><span class=\"line\">Animal.include(&#123; </span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am animal'</span>)  </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    breath: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'breath'</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal;</span><br><span class=\"line\">animal.breath(); <span class=\"comment\">//I am animal //breath</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Cat = <span class=\"keyword\">new</span> Class(Animal)</span><br><span class=\"line\">Cat.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I am Cat'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Usage</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tommy = <span class=\"keyword\">new</span> Cat; </span><br><span class=\"line\">tommy.breath();<span class=\"comment\">//I am Cat //breath</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"bind-polyfill\"><a href=\"#bind-polyfill\" class=\"headerlink\" title=\"bind polyfill\"></a>bind polyfill</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Function</span>.prototype.bind) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//self 就是bind的调用者 context是调用者想绑定上下文</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">            slice = [].prototype.slice,</span><br><span class=\"line\">            <span class=\"comment\">//获取额外要传递的参数</span></span><br><span class=\"line\">            args = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            <span class=\"comment\">//用来做间接继承的</span></span><br><span class=\"line\">            nop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//将bind的调用者的原型 赋值给nop</span></span><br><span class=\"line\">        nop.prototype = self.prototype;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//bound 会覆盖bind调用者</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> bound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//这里是函数被调用时 会生效的逻辑</span></span><br><span class=\"line\">            <span class=\"comment\">//通过apply将上下文 指向 nop(因为继承了bind调用者的原型)或者context</span></span><br><span class=\"line\">            <span class=\"comment\">//然后函数调用时传递的参数合并到之前传递进来的参数数组里</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.apply(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> nop ? <span class=\"keyword\">this</span> : (context || &#123;&#125;), args.concat(slice(<span class=\"built_in\">arguments</span>)))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将bind调用者的原型赋值给bound的原型, 这样bound也拥有了bind调用者的属性和方法, 而且具有改变上下文指向的能力</span></span><br><span class=\"line\">        bound.prototype = <span class=\"keyword\">new</span> nop();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bound;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}