{"tags":[{"name":"深入浅出Node.js","permalink":"wjcun.com/tags/深入浅出Node-js/","url":"/async/tags/深入浅出Node.js.json","count":1}],"categories":[],"url":"/async/posts/2018/01/13/node-js模块机制.json","date":1515830003000,"path":{"year":2018,"month":1,"day":13,"name":"node-js模块机制"},"title":"node.js模块机制","permalink":"wjcun.com/2018/01/13/node-js模块机制/","content":"<h2 id=\"模块编译\"><a href=\"#模块编译\" class=\"headerlink\" title=\"模块编译\"></a>模块编译</h2><p>module的定义<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Module</span>(<span class=\"params\">id, parent</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.exports = &#123;&#125;; </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.parent = parent;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent &amp;&amp; parent.children) &#123;</span><br><span class=\"line\">         parent.children.push(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.filename = <span class=\"literal\">null</span>; </span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loaded = <span class=\"literal\">false</span>; t</span><br><span class=\"line\">    his.children = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = <span class=\"keyword\">new</span> Module()</span><br></pre></td></tr></table></figure></p>\n<p>node会对引入的不同扩展类型的文件进行不同方式解析</p>\n<ul>\n<li>.js文件. 通过fs模块同步读取文件后编译执行</li>\n<li>.node文件. 这是C/C++编写的扩展文件, 通过dlopen()方法加载最后编译生成的文件</li>\n<li>.json文件. 通过JSON.parse获取结果</li>\n<li>其他扩展类型. 它们都被当做js文件引入<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Module._extensions[<span class=\"string\">'.json'</span>] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, filename</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> content = NativeModule.require(<span class=\"string\">'fs'</span>).readFileSync(filename, <span class=\"string\">'utf8'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">module</span>.exports = <span class=\"built_in\">JSON</span>.parse(stripBOM(content));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        err.message = filename + <span class=\"string\">': '</span> + err.message;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最后Module._extensions 会被赋值给require, 这样require可以在引入文件的时候, 根据不同类型进行解析</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>.extensions = Module._extensions</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果想对特殊的扩展进行处理, 可进行如下操作</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>.extensions[<span class=\"string\">'.ext'</span>] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"node中的module-require等变量从何而来\"><a href=\"#node中的module-require等变量从何而来\" class=\"headerlink\" title=\"node中的module, require等变量从何而来?\"></a>node中的module, require等变量从何而来?</h3><p>其实node对获取数据通过字符的形式拼接如下, 然后再调用vm原生模块的<code>runInThisContext()</code>方法(类似eval, 只是具有明确的上下文, 不污染全局), 返回一个function对象, 最后将<code>exports, require, module, __filename, __dirname</code>通过参数传入, 这样每个模块就可以独立作用域了<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">exports, require, module, __filename, __dirname</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>);</span><br><span class=\"line\">    exports.area = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">radius</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * radius * radius; &#125;;</span><br><span class=\"line\">&#125;)(exports, <span class=\"built_in\">require</span>, <span class=\"built_in\">module</span>, __filename, __dirname)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"为什么需要同时传入exports和module\"><a href=\"#为什么需要同时传入exports和module\" class=\"headerlink\" title=\"为什么需要同时传入exports和module?\"></a>为什么需要同时传入exports和module?</h3><p>因为<code>exports = module.exports</code>, <code>exports</code>只是一个引用, 当赋值一个对象时, 这个引用就会被覆盖掉, 因此只能使用<code>module.exports</code></p>\n"}