{"tags":[{"name":"数据结构与算法","permalink":"http://blog.hellolc.com/tags/数据结构与算法/","url":"/async/tags/数据结构与算法.json","count":1}],"categories":[],"url":"/async/posts/2018/05/09/数据结构.json","date":1525826389000,"path":{"year":2018,"month":5,"day":9,"name":"数据结构"},"title":"数据结构与算法","permalink":"http://blog.hellolc.com/2018/05/09/数据结构/","content":"<h2 id=\"stach\"><a href=\"#stach\" class=\"headerlink\" title=\"stach\"></a>stach</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* name;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">    Teacher() &#123;</span><br><span class=\"line\">        age = <span class=\"number\">18</span>;</span><br><span class=\"line\">        name = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(name, <span class=\"string\">\"default\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Teacher(<span class=\"keyword\">int</span> _age, <span class=\"keyword\">char</span>* _name) &#123;</span><br><span class=\"line\">        age = _age;</span><br><span class=\"line\">        name = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"built_in\">strlen</span>(_name) + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(name, _name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Teacher(Teacher&amp; obj) &#123;</span><br><span class=\"line\">        age = obj.age;</span><br><span class=\"line\">        name = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"built_in\">strlen</span>(obj.name) + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(name, obj.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~Teacher() &#123;</span><br><span class=\"line\">        age = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> [] name;</span><br><span class=\"line\">            name = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Teacher&amp; <span class=\"keyword\">operator</span>=(Teacher&amp; obj) &#123;</span><br><span class=\"line\">        age = obj.age;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> [] name;</span><br><span class=\"line\">            name = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        name = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"built_in\">strlen</span>(obj.name) + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(name, obj.name);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MyLink</span> &#123;</span></span><br><span class=\"line\">    T* data;</span><br><span class=\"line\">    MyLink&lt;T&gt;* prev;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyStack</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> _size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    MyLink&lt;T&gt;* head;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    MyStack() &#123;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> MyLink&lt;T&gt;;</span><br><span class=\"line\">        head-&gt;data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        head-&gt;prev = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~MyStack() &#123;</span><br><span class=\"line\">        clear();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (head-&gt;data != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> head-&gt;data;</span><br><span class=\"line\">                head-&gt;data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (head-&gt;prev != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">delete</span> head-&gt;prev;</span><br><span class=\"line\">                head-&gt;prev = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">push</span><span class=\"params\">(T* objP)</span> </span>&#123;</span><br><span class=\"line\">        MyLink&lt;T&gt;* p = <span class=\"keyword\">new</span> MyLink&lt;T&gt;;</span><br><span class=\"line\">        p-&gt;data = objP;</span><br><span class=\"line\">        p-&gt;prev = head;</span><br><span class=\"line\">        head = p;</span><br><span class=\"line\">        _size++;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> _size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\">T* <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        MyLink&lt;T&gt;* curr = head;</span><br><span class=\"line\">        head = head-&gt;prev;</span><br><span class=\"line\">        _size--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr-&gt;data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (_size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            pop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    Teacher t1(1, \"t1\"), t2(2, \"t2\"), t3(3, \"t3\");</span><br><span class=\"line\">    MyStack&lt;Teacher&gt; s = MyStack&lt;Teacher&gt;();</span><br><span class=\"line\">    s.push(&amp;t1);</span><br><span class=\"line\">    s.push(&amp;t2);</span><br><span class=\"line\">    s.push(&amp;t3);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s.size()) &#123;</span><br><span class=\"line\">        Teacher* tmp = s.pop();</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"name: \"</span> &lt;&lt; tmp-&gt;getName() &lt;&lt; <span class=\"string\">\" age: \"</span> &lt;&lt; tmp-&gt;getAge() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><h3 id=\"递归方法\"><a href=\"#递归方法\" class=\"headerlink\" title=\"递归方法\"></a>递归方法</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span>* <span class=\"title\">lChild</span>, *<span class=\"title\">rChild</span>;</span></span><br><span class=\"line\">&#125;BiTNode, *BiTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printData</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\" %d \"</span>, num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">(BiTNode* T)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    inOrder(T-&gt;lChild);</span><br><span class=\"line\">    printData(T-&gt;data);</span><br><span class=\"line\">    inOrder(T-&gt;rChild);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">BiTNode* <span class=\"title\">copyTree</span><span class=\"params\">(BiTNode* T)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    BiTNode* newNode = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    BiTNode* newLChild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    BiTNode* newRChild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T-&gt;lChild != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        newLChild = copyTree(T-&gt;lChild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T-&gt;rChild != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        newRChild = copyTree(T-&gt;rChild);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    newNode = (BiTNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(newNode, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newNode == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    newNode-&gt;data = T-&gt;data;</span><br><span class=\"line\">    newNode-&gt;lChild = newLChild;</span><br><span class=\"line\">    newNode-&gt;rChild = newRChild;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> newNode;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    BiTNode t1, t2, t3, t4, t5;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;t1, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;t2, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;t3, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;t4, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;t5, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">    t1.data = <span class=\"number\">1</span>;</span><br><span class=\"line\">    t1.lChild = &amp;t2;</span><br><span class=\"line\">    t1.rChild = &amp;t3;</span><br><span class=\"line\">    t2.data = <span class=\"number\">2</span>;</span><br><span class=\"line\">    t2.lChild = &amp;t4;</span><br><span class=\"line\">    t3.data = <span class=\"number\">3</span>;</span><br><span class=\"line\">    t3.rChild = &amp;t5;</span><br><span class=\"line\">    t4.data = <span class=\"number\">4</span>;</span><br><span class=\"line\">    t5.data = <span class=\"number\">5</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\nold tree: \\n\"</span>);</span><br><span class=\"line\">    inOrder(&amp;t1);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\nnew tree: \\n\"</span>);</span><br><span class=\"line\">    BiTNode* newT = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    newT = copyTree(&amp;t1);</span><br><span class=\"line\">    inOrder(newT);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"非递归方法\"><a href=\"#非递归方法\" class=\"headerlink\" title=\"非递归方法\"></a>非递归方法</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTNode</span>* <span class=\"title\">lChild</span>, *<span class=\"title\">rChild</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printData</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\" %d \"</span>, num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">(BiTNode* T)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    inOrder(T-&gt;lChild);</span><br><span class=\"line\">    printData(T-&gt;data);</span><br><span class=\"line\">    inOrder(T-&gt;rChild);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">BiTNode* <span class=\"title\">goLeft</span><span class=\"params\">(BiTNode* T,<span class=\"built_in\">stack</span>&lt;BiTNode*&gt; &amp;s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//判断是否有左节点, 如果有就入栈, 否则就返回当前节点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T-&gt;lChild != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        s.push(T);</span><br><span class=\"line\">        T = T-&gt;lChild;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inOrder2</span><span class=\"params\">(BiTNode* T)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (T == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">stack</span>&lt;BiTNode*&gt; s;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//步骤1</span></span><br><span class=\"line\">    T = goLeft(T, s);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T) &#123;</span><br><span class=\"line\">        printData(T-&gt;data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T-&gt;rChild) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果有右子树 就重复步骤1</span></span><br><span class=\"line\">            T = goLeft(T-&gt;rChild, s);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!s.empty()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果没右子树并且栈顶不为空, 则取出栈顶, 回退到栈顶元素</span></span><br><span class=\"line\">            T = s.top();</span><br><span class=\"line\">            s.pop();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            T = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    BiTNode t1, t2, t3, t4, t5;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;t1, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;t2, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;t3, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;t4, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;t5, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(BiTNode));</span><br><span class=\"line\">    t1.data = <span class=\"number\">1</span>;</span><br><span class=\"line\">    t1.lChild = &amp;t2;</span><br><span class=\"line\">    t1.rChild = &amp;t3;</span><br><span class=\"line\">    t2.data = <span class=\"number\">2</span>;</span><br><span class=\"line\">    t2.lChild = &amp;t4;</span><br><span class=\"line\">    t3.data = <span class=\"number\">3</span>;</span><br><span class=\"line\">    t3.rChild = &amp;t5;</span><br><span class=\"line\">    t4.data = <span class=\"number\">4</span>;</span><br><span class=\"line\">    t5.data = <span class=\"number\">5</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n递归方法: \\n\"</span>);</span><br><span class=\"line\">    inOrder(&amp;t1);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n非递归方法: \\n\"</span>);</span><br><span class=\"line\">    inOrder2(&amp;t1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Morris方法遍历二叉树\"><a href=\"#Morris方法遍历二叉树\" class=\"headerlink\" title=\"Morris方法遍历二叉树\"></a>Morris方法遍历二叉树</h3><ol>\n<li><p>如果当前节点的左孩子为空，则输出当前节点并将其右孩子作为当前节点。</p>\n</li>\n<li><p>如果当前节点的左孩子不为空，在当前节点的左子树中找到当前节点在中序遍历下的前驱节点。</p>\n<p> a) 如果前驱节点的右孩子为空，将它的右孩子设置为当前节点。当前节点更新为当前节点的左孩子。</p>\n<p> b) 如果前驱节点的右孩子为当前节点，将它的右孩子重新设为空（恢复树的形状）。输出当前节点。当前节点更新为当前节点的右孩子。</p>\n</li>\n<li><p>重复以上1、2直到当前节点为空。</p>\n</li>\n</ol>\n<p><a href=\"https://img-blog.csdn.net/20150829152118062\" target=\"_blank\" rel=\"noopener\">步骤</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inorderMorrisTraversal</span><span class=\"params\">(BiTNode *root)</span> </span>&#123;</span><br><span class=\"line\">    BiTNode* curr = <span class=\"literal\">NULL</span>, *prev = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curr-&gt;lChild == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//1. 如果当前节点的左孩子为空，则输出当前节点并将其右孩子作为当前节点。</span></span><br><span class=\"line\">            printData(curr-&gt;data);</span><br><span class=\"line\">            curr = curr-&gt;rChild;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            prev = curr-&gt;lChild;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (prev-&gt;rChild != <span class=\"literal\">NULL</span> &amp;&amp; prev-&gt;rChild != curr) &#123;</span><br><span class=\"line\">                prev = curr-&gt;rChild;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prev-&gt;rChild == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//a) 如果前驱节点的右孩子为空，将它的右孩子设置为当前节点。当前节点更新为当前节点的左孩子。</span></span><br><span class=\"line\">                prev-&gt;rChild = curr;</span><br><span class=\"line\">                curr = curr-&gt;lChild;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//b) 如果前驱节点的右孩子为当前节点，将它的右孩子重新设为空（恢复树的形状）。输出当前节点。当前节点更新为当前节点的右孩子。</span></span><br><span class=\"line\">                printData(curr-&gt;data);</span><br><span class=\"line\">                curr = curr-&gt;rChild;</span><br><span class=\"line\">                prev-&gt;rChild = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/BaroC/p/5188545.html\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printArr</span><span class=\"params\">(<span class=\"keyword\">int</span>* arr, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"开始打印: \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i ++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\" %d \"</span>, arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *arr, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = i;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>; (j &gt;= <span class=\"number\">0</span>) &amp;&amp; (arr[j] &gt; tmp); j--) &#123;</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            k = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        arr[k] = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">32</span>,<span class=\"number\">12</span>,<span class=\"number\">42</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"keyword\">sizeof</span>(arr) / <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>);</span><br><span class=\"line\">    selectSort(arr, len);</span><br><span class=\"line\">    printArr(arr, len);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><blockquote>\n<p>与插入排序类似</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *arr, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>, k = <span class=\"number\">-1</span>, temp = <span class=\"number\">-1</span>, gap = len;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        gap = gap / <span class=\"number\">3</span> + <span class=\"number\">1</span>; <span class=\"comment\">//业界统一实验的结果</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = gap; i &lt; len; i += gap) &#123;</span><br><span class=\"line\">            k = i;</span><br><span class=\"line\">            temp = arr[k];</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = i - gap; (j &gt;= <span class=\"number\">0</span>) &amp;&amp; (arr[j] &gt; temp); j -= gap) &#123;</span><br><span class=\"line\">                arr[j + gap] = arr[j];</span><br><span class=\"line\">                k = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[k] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (gap &gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *arr, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>; <span class=\"comment\">//0表示没有发生交换, 1表示发生交换</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; (i &lt; len) &amp;&amp; flag; i++) &#123;</span><br><span class=\"line\">        flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = len - <span class=\"number\">1</span>; j &gt; i; j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j - <span class=\"number\">1</span>] &gt; arr[j]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> tmp = arr[j];</span><br><span class=\"line\">                arr[j] = arr[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[j - <span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">                flag = <span class=\"number\">1</span>;<span class=\"comment\">//发生了交换</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *arr, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = arr[low];</span><br><span class=\"line\">    arr[low] = arr[high];</span><br><span class=\"line\">    arr[high] = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span> *arr, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//找出基准值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pv = arr[low];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt; high) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//找出比基准值小的数 并交换</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((low &lt; high) &amp;&amp; arr[high] &gt;= pv) &#123;</span><br><span class=\"line\">            high--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(arr, low, high);</span><br><span class=\"line\">        <span class=\"comment\">//找出比基准值大的数 并交换</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((low &lt; high) &amp;&amp; arr[low] &lt;= pv) &#123;</span><br><span class=\"line\">            low++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        swap(arr, low, high);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *arr, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//分区</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = partition(arr, low, high);</span><br><span class=\"line\">        <span class=\"comment\">//分治左边</span></span><br><span class=\"line\">        quickSort(arr, low, mid - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//分治右边</span></span><br><span class=\"line\">        quickSort(arr, mid + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}