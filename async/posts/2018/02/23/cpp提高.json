{"tags":[],"categories":[],"url":"/async/posts/2018/02/23/cpp提高.json","date":1519351072000,"path":{"year":2018,"month":2,"day":23,"name":"cpp提高"},"title":"cpp提高","permalink":"http://blog.hellolc.com/2018/02/23/cpp提高/","content":"<h2 id=\"模板-lt-泛型-gt\"><a href=\"#模板-lt-泛型-gt\" class=\"headerlink\" title=\"模板&lt;泛型&gt;\"></a>模板&lt;泛型&gt;</h2><blockquote>\n<p>cpp编译器对模板进行两次编译, 根据程序中用到的类型生成对应的函数</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mySwap</span><span class=\"params\">(T &amp;a, T &amp;b)</span> </span>&#123;</span><br><span class=\"line\">    a = a ^ b;</span><br><span class=\"line\">    b = a ^ b;</span><br><span class=\"line\">    a = a ^ b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// insert code here...</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c = <span class=\"string\">'c'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> d = <span class=\"string\">'d'</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    mySwap&lt;<span class=\"keyword\">int</span>&gt;(a, b);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" a: \"</span> &lt;&lt; a &lt;&lt; <span class=\"string\">\" b: \"</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    mySwap&lt;<span class=\"keyword\">char</span>&gt;(c, d);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" c: \"</span> &lt;&lt; c &lt;&lt; <span class=\"string\">\" d: \"</span> &lt;&lt; d &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"不同类型静态变量\"><a href=\"#不同类型静态变量\" class=\"headerlink\" title=\"不同类型静态变量\"></a>不同类型静态变量</h3><blockquote>\n<p>不同类型的静态变量 各分配内存</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestA</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">static</span> T a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这句必须要申明</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T TestA&lt;T&gt;::a = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// insert code here...</span></span><br><span class=\"line\">    TestA&lt;<span class=\"keyword\">int</span>&gt; a;</span><br><span class=\"line\">    a.a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    TestA&lt;<span class=\"keyword\">char</span>&gt; b;</span><br><span class=\"line\">    b.a = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"TestA&lt;int&gt;::a \"</span> &lt;&lt; TestA&lt;<span class=\"keyword\">int</span>&gt;::a &lt;&lt; <span class=\"string\">\" TestA&lt;char&gt;::a \"</span> &lt;&lt; TestA&lt;<span class=\"keyword\">char</span>&gt;::a &lt;&lt; <span class=\"built_in\">endl</span>;<span class=\"comment\">//TestA&lt;int&gt;::a 10 TestA&lt;char&gt;::a a</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类模板\"><a href=\"#类模板\" class=\"headerlink\" title=\"类模板\"></a>类模板</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyVertor2</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; out, <span class=\"keyword\">const</span> MyVertor2&lt;T&gt; &amp;obj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        out &lt;&lt; <span class=\"string\">\"开始重装 &lt;&lt;: \"</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = obj.getLen();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            out &lt;&lt; obj.m_space[i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        out &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_len;</span><br><span class=\"line\">    T* m_space;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    MyVertor2(<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>);</span><br><span class=\"line\">    MyVertor2(<span class=\"keyword\">const</span> MyVertor2&amp; obj);</span><br><span class=\"line\">    ~MyVertor2();</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    T&amp; <span class=\"keyword\">operator</span>[](<span class=\"keyword\">int</span> index);</span><br><span class=\"line\">    MyVertor2&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> MyVertor2&amp; obj);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getLen</span><span class=\"params\">()</span><span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">MyVertor2&lt;T&gt;::MyVertor2(<span class=\"keyword\">int</span> len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;m_len = len;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;m_space = <span class=\"keyword\">new</span> T[len];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">MyVertor2&lt;T&gt;::MyVertor2(<span class=\"keyword\">const</span> MyVertor2&amp; obj)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    m_len = obj.m_len;</span><br><span class=\"line\">    m_space = <span class=\"keyword\">new</span> T[m_len];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m_len; i++) &#123;</span><br><span class=\"line\">        m_space[i] = obj.m_space[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">MyVertor2&lt;T&gt;::~MyVertor2()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m_space != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] m_space;</span><br><span class=\"line\">        m_space = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        m_len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T&amp; MyVertor2&lt;T&gt;::<span class=\"keyword\">operator</span>[](<span class=\"keyword\">int</span> index)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_space[index];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">MyVertor2&lt;T&gt;&amp; MyVertor2&lt;T&gt;::<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> MyVertor2&amp; obj)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m_space != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> [] m_space;</span><br><span class=\"line\">        m_space = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        m_len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    m_len = obj.m_len;</span><br><span class=\"line\">    m_space = <span class=\"keyword\">new</span> T[m_len];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m_len; i++) &#123;</span><br><span class=\"line\">        m_space[i] = obj.m_space[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> MyVertor2&lt;T&gt;::getLen() <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> m_len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Human</span> &#123;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">friend</span> ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; out, <span class=\"keyword\">const</span> Human&amp; obj) &#123;</span><br><span class=\"line\">        out &lt;&lt; <span class=\"string\">\"name: \"</span> &lt;&lt; obj.m_name &lt;&lt; <span class=\"string\">\" age:\"</span> &lt;&lt; obj.m_age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> out;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* m_name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_age;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Human() &#123;</span><br><span class=\"line\">        m_age = <span class=\"number\">18</span>;</span><br><span class=\"line\">        m_name = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(m_name, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Human(<span class=\"keyword\">char</span> *p_name, <span class=\"keyword\">int</span> age) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(p_name) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        m_name = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[len];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(m_name, p_name);</span><br><span class=\"line\">        m_age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~Human() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_name != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> m_name;</span><br><span class=\"line\">            m_name = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Human&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Human&amp; obj) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m_name != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> m_name;</span><br><span class=\"line\">            m_name = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(obj.m_name) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        m_name = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[len];</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(m_name, obj.m_name);</span><br><span class=\"line\">        </span><br><span class=\"line\">        m_age = obj.m_age;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Human <span class=\"title\">h1</span><span class=\"params\">(<span class=\"string\">\"h1\"</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Human <span class=\"title\">h2</span><span class=\"params\">(<span class=\"string\">\"h2\"</span>, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">    MyVertor2&lt;Human&gt; v1(<span class=\"number\">1</span>);</span><br><span class=\"line\">    v1[<span class=\"number\">0</span>] = h1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    MyVertor2&lt;Human&gt; v2;</span><br><span class=\"line\">    v2 = v1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; v2[<span class=\"number\">0</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h3><ul>\n<li>static_cast 同类型转换(编译时进行类型检测), 比如int-&gt;long</li>\n<li>reinterpret_cast<tpyename>  不同类型之间转换 可以转换任意一个32bit整数，包括所有的指针和整数</tpyename></li>\n<li>dynamic_cast<typename> 多态之间转换</typename></li>\n<li>const_cast<typename> 去除只读属性</typename></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modifyP</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p1 = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    p1 = <span class=\"keyword\">const_cast</span>&lt;<span class=\"keyword\">char</span> *&gt;(p);</span><br><span class=\"line\">    </span><br><span class=\"line\">    p1[<span class=\"number\">0</span>] = <span class=\"string\">'A'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[<span class=\"number\">10</span>] = <span class=\"string\">\"aaaaaaaaa\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    modifyP(buf);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"buf:\"</span> &lt;&lt; buf &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> b;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>* p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//    p = static_cast&lt;int *&gt;(a);</span></span><br><span class=\"line\">    p = <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">int</span> *&gt;(a);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"p: \"</span> &lt;&lt; p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExpObj</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ExpObj() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"构造函数\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~ExpObj() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"析构函数\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// throw是限定抛出什么类型的异常</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestThrow</span><span class=\"params\">()</span> <span class=\"title\">throw</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">char</span>, ExpObj)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> ExpObj();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        TestThrow();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">char</span> *e) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"throw char :\"</span> &lt;&lt; e &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">int</span> e) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"throw int :\"</span> &lt;&lt; e &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ExpObj &amp;e) &#123; <span class=\"comment\">//如果不用引用来接受 会进行拷贝对象</span></span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"throw ExpObj :\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (...) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"unkown exp\"</span>  &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyExp</span> :</span> <span class=\"keyword\">public</span> exception &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    MyExp(<span class=\"keyword\">char</span> * p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;m_p = p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * <span class=\"title\">what</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"MyExp: \"</span> &lt;&lt; m_p &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* m_p;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testMyExp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> MyExp(<span class=\"string\">\"异常抛出\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        testMyExp();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (MyExp &amp;e) &#123;</span><br><span class=\"line\">        e.what();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过多态实现自定义异常\"><a href=\"#通过多态实现自定义异常\" class=\"headerlink\" title=\"通过多态实现自定义异常\"></a>通过多态实现自定义异常</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThrowClass</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">expParent</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">printfExp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"expParent\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">expSub1</span> :</span> <span class=\"keyword\">public</span> expParent&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">printfExp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"expSub1\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">expSub2</span> :</span> <span class=\"keyword\">public</span> expParent&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">printfExp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"expSub2\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testMethod</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> expSub1();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> expSub2();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> expParent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    TestThrowClass t;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        t.testMethod(<span class=\"number\">-1</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (TestThrowClass::expParent &amp;e) &#123;</span><br><span class=\"line\">        e.printfExp();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"IO\"><a href=\"#IO\" class=\"headerlink\" title=\"IO\"></a>IO</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"fstream\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Teacher() &#123;</span><br><span class=\"line\">        _age = <span class=\"number\">18</span>;</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(_name, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Teacher(<span class=\"keyword\">char</span> *name, <span class=\"keyword\">int</span> age) &#123;</span><br><span class=\"line\">        _age = age;</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(_name, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"name: \"</span> &lt;&lt; _name &lt;&lt; <span class=\"string\">\" age: \"</span> &lt;&lt; _age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> _age;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> _name[<span class=\"number\">32</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *fname = <span class=\"string\">\"/Users/xxxx/Desktop/test.txt\"</span>;</span><br><span class=\"line\">    <span class=\"function\">ofstream <span class=\"title\">fout</span><span class=\"params\">(fname, ios::binary)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fout) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"open file error\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">Teacher <span class=\"title\">t1</span><span class=\"params\">(<span class=\"string\">\"t1\"</span>, <span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Teacher <span class=\"title\">t2</span><span class=\"params\">(<span class=\"string\">\"t2\"</span>, <span class=\"number\">19</span>)</span></span>;</span><br><span class=\"line\">    fout.write((<span class=\"keyword\">char</span>*)&amp;t1, <span class=\"keyword\">sizeof</span>(Teacher));</span><br><span class=\"line\">    fout.write((<span class=\"keyword\">char</span>*)&amp;t2, <span class=\"keyword\">sizeof</span>(Teacher));</span><br><span class=\"line\">    fout.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    Teacher tmp;</span><br><span class=\"line\">    <span class=\"function\">ifstream <span class=\"title\">fin</span><span class=\"params\">(fname)</span></span>;</span><br><span class=\"line\">    fin.read((<span class=\"keyword\">char</span> *)&amp;tmp, <span class=\"keyword\">sizeof</span>(Teacher));</span><br><span class=\"line\">    tmp.printInfo();</span><br><span class=\"line\">    fin.close();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"STL\"><a href=\"#STL\" class=\"headerlink\" title=\"STL\"></a>STL</h2><h3 id=\"vector\"><a href=\"#vector\" class=\"headerlink\" title=\"vector\"></a>vector</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"vector\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Teacher() &#123;</span><br><span class=\"line\">        _age = <span class=\"number\">18</span>;</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(_name, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Teacher(<span class=\"keyword\">char</span> *name, <span class=\"keyword\">int</span> age) &#123;</span><br><span class=\"line\">        _age = age;</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(_name, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"name: \"</span> &lt;&lt; _name &lt;&lt; <span class=\"string\">\" age: \"</span> &lt;&lt; _age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> _age;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> _name[<span class=\"number\">32</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestVector</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Teacher <span class=\"title\">t1</span><span class=\"params\">(<span class=\"string\">\"t1\"</span>, <span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Teacher <span class=\"title\">t2</span><span class=\"params\">(<span class=\"string\">\"t2\"</span>, <span class=\"number\">19</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;Teacher&gt; v;</span><br><span class=\"line\">    v.push_back(t1);</span><br><span class=\"line\">    v.push_back(t2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">vector</span>&lt;Teacher&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;</span><br><span class=\"line\">        it-&gt;printInfo();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    TestVector();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"string\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"algorithm\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> s1 = <span class=\"string\">\"hello world hello world hello world hello world \"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> str = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> str2 = <span class=\"string\">\"HELLO\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">strlen</span> = str2.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((index = s1.find(str, index)) != <span class=\"built_in\">string</span>::npos) &#123;</span><br><span class=\"line\">        s1.replace(index, <span class=\"built_in\">strlen</span>, str2);</span><br><span class=\"line\">        index += <span class=\"built_in\">strlen</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"s1: \"</span> &lt;&lt; s1 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    str.append(<span class=\"string\">\" world\"</span>);</span><br><span class=\"line\">    transform(str.begin(), str.end(), str.begin(), ::<span class=\"built_in\">toupper</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"str: \"</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    str2.insert(<span class=\"number\">0</span>, <span class=\"string\">\"nihao, \"</span>);</span><br><span class=\"line\">    str2.insert(str2.length(), <span class=\"string\">\"!!!\"</span>);</span><br><span class=\"line\">    transform(str2.begin(), str2.end(), str2.begin(), ::<span class=\"built_in\">tolower</span>);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"str2: \"</span> &lt;&lt; str2 &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    TestString();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"list\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printList</span><span class=\"params\">(<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt; l)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it = l.begin(); it != l.end(); it++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; *it &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt; l;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        l.push_back(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printList(l);</span><br><span class=\"line\">    </span><br><span class=\"line\">    l.insert(l.begin(), <span class=\"number\">-1</span>);</span><br><span class=\"line\">    l.insert(l.begin(), <span class=\"number\">-2</span>);</span><br><span class=\"line\">    l.insert(l.begin(), <span class=\"number\">-3</span>);</span><br><span class=\"line\">    printList(l);</span><br><span class=\"line\">    </span><br><span class=\"line\">    l.erase(l.begin());</span><br><span class=\"line\">    printList(l);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it1 = l.begin();</span><br><span class=\"line\">    <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it2 = l.begin();</span><br><span class=\"line\">    it2 ++;</span><br><span class=\"line\">    it2 ++; <span class=\"comment\">//必须一次次叠加不能直接+2</span></span><br><span class=\"line\">    l.erase(it1, it2);</span><br><span class=\"line\">    printList(l);</span><br><span class=\"line\">    </span><br><span class=\"line\">    l.remove(<span class=\"number\">5</span>);</span><br><span class=\"line\">    printList(l);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    TestList();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"queue\"><a href=\"#queue\" class=\"headerlink\" title=\"queue\"></a>queue</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"queue\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fillQueue</span><span class=\"params\">(priority_queue&lt;<span class=\"keyword\">int</span>&gt; &amp;q)</span> </span>&#123;</span><br><span class=\"line\">    q.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">    q.push(<span class=\"number\">10</span>);</span><br><span class=\"line\">    q.push(<span class=\"number\">4</span>);</span><br><span class=\"line\">    q.push(<span class=\"number\">8</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fillQueue2</span><span class=\"params\">(priority_queue&lt;<span class=\"keyword\">int</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;, less&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;q)</span> </span>&#123;</span><br><span class=\"line\">    q.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">    q.push(<span class=\"number\">10</span>);</span><br><span class=\"line\">    q.push(<span class=\"number\">4</span>);</span><br><span class=\"line\">    q.push(<span class=\"number\">8</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fillQueue3</span><span class=\"params\">(priority_queue&lt;<span class=\"keyword\">int</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;, greater&lt;<span class=\"keyword\">int</span>&gt;&gt; &amp;q)</span> </span>&#123;</span><br><span class=\"line\">    q.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">    q.push(<span class=\"number\">10</span>);</span><br><span class=\"line\">    q.push(<span class=\"number\">4</span>);</span><br><span class=\"line\">    q.push(<span class=\"number\">8</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printQueue</span><span class=\"params\">(priority_queue&lt;<span class=\"keyword\">int</span>&gt; q)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = q.top();</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; tmp &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printQueue2</span><span class=\"params\">(priority_queue&lt;<span class=\"keyword\">int</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;, less&lt;<span class=\"keyword\">int</span>&gt;&gt; q)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = q.top();</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; tmp &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printQueue3</span><span class=\"params\">(priority_queue&lt;<span class=\"keyword\">int</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;, greater&lt;<span class=\"keyword\">int</span>&gt;&gt; q)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = q.top();</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; tmp &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    priority_queue&lt;<span class=\"keyword\">int</span>&gt; q1;<span class=\"comment\">//默认最大值优先队列</span></span><br><span class=\"line\">    priority_queue&lt;<span class=\"keyword\">int</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;, less&lt;<span class=\"keyword\">int</span>&gt;&gt; q2; <span class=\"comment\">//最大值优先队列</span></span><br><span class=\"line\">    priority_queue&lt;<span class=\"keyword\">int</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;, greater&lt;<span class=\"keyword\">int</span>&gt; &gt; q3;<span class=\"comment\">//最小值优先队列</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    fillQueue(q1);</span><br><span class=\"line\">    fillQueue2(q2);</span><br><span class=\"line\">    fillQueue3(q3);</span><br><span class=\"line\">    </span><br><span class=\"line\">    printQueue(q1);</span><br><span class=\"line\">    printQueue2(q2);</span><br><span class=\"line\">    printQueue3(q3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    TestQueue();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"set-multiset\"><a href=\"#set-multiset\" class=\"headerlink\" title=\"set/multiset\"></a>set/multiset</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"set\"</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Teacher() &#123;</span><br><span class=\"line\">        _age = <span class=\"number\">18</span>;</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(_name, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Teacher(<span class=\"keyword\">char</span> *name, <span class=\"keyword\">int</span> age) &#123;</span><br><span class=\"line\">        _age = age;</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(_name, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"name: \"</span> &lt;&lt; _name &lt;&lt; <span class=\"string\">\" age: \"</span> &lt;&lt; _age &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">getName</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> _age;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> _name[<span class=\"number\">32</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">CustOrder</span> &#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">const</span> Teacher&amp; left, <span class=\"keyword\">const</span> Teacher&amp; right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left.getAge() &lt; right.getAge();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertSet</span><span class=\"params\">(<span class=\"built_in\">set</span>&lt;Teacher, CustOrder&gt;&amp;s, Teacher &amp;t)</span> </span>&#123;</span><br><span class=\"line\">    pair&lt;<span class=\"built_in\">set</span>&lt;Teacher, CustOrder&gt;::iterator, <span class=\"keyword\">bool</span>&gt; pair = s.insert(t);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pair.second == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; t.getName() &lt;&lt; <span class=\"string\">\" 插入成功\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; t.getName() &lt;&lt; <span class=\"string\">\" 插入失败\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestSet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Teacher <span class=\"title\">t1</span><span class=\"params\">(<span class=\"string\">\"t1\"</span>, <span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Teacher <span class=\"title\">t2</span><span class=\"params\">(<span class=\"string\">\"t2\"</span>, <span class=\"number\">38</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Teacher <span class=\"title\">t3</span><span class=\"params\">(<span class=\"string\">\"t3\"</span>, <span class=\"number\">28</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Teacher <span class=\"title\">t4</span><span class=\"params\">(<span class=\"string\">\"t4\"</span>, <span class=\"number\">8</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Teacher <span class=\"title\">t5</span><span class=\"params\">(<span class=\"string\">\"t5\"</span>, <span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Teacher <span class=\"title\">t6</span><span class=\"params\">(<span class=\"string\">\"t6\"</span>, <span class=\"number\">58</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">set</span>&lt;Teacher, CustOrder&gt; s1;</span><br><span class=\"line\">    insertSet(s1, t1);</span><br><span class=\"line\">    insertSet(s1, t2);</span><br><span class=\"line\">    insertSet(s1, t3);</span><br><span class=\"line\">    insertSet(s1, t4);</span><br><span class=\"line\">    insertSet(s1, t5);</span><br><span class=\"line\">    insertSet(s1, t6);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">set</span>&lt;Teacher, CustOrder&gt;::iterator it = s1.begin(); it != s1.end(); it++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"name: \"</span> &lt;&lt; it-&gt;getName() &lt;&lt; <span class=\"string\">\" age:\"</span> &lt;&lt; it-&gt;getAge() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    TestSet();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"map-multimap\"><a href=\"#map-multimap\" class=\"headerlink\" title=\"map/multimap\"></a>map/multimap</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"map\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"string\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TestMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt; m1;</span><br><span class=\"line\">    m1.insert(pair&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt;(<span class=\"string\">\"m1\"</span>, <span class=\"number\">18</span>));</span><br><span class=\"line\">    m1.insert(make_pair(<span class=\"string\">\"m2\"</span>, <span class=\"number\">19</span>));</span><br><span class=\"line\">    m1.insert(<span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt;::value_type(<span class=\"string\">\"m3\"</span>, <span class=\"number\">20</span>));</span><br><span class=\"line\">    m1[<span class=\"string\">\"m4\"</span>] = <span class=\"number\">21</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!m1.empty()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"keyword\">int</span>&gt;::iterator it = m1.begin();</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"name: \"</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">\" age: \"</span> &lt;&lt; it-&gt;second &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        m1.erase(it);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\">Teacher <span class=\"title\">t1</span><span class=\"params\">(<span class=\"string\">\"t1\"</span>, <span class=\"number\">18</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Teacher <span class=\"title\">t2</span><span class=\"params\">(<span class=\"string\">\"t2\"</span>, <span class=\"number\">19</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Teacher <span class=\"title\">t3</span><span class=\"params\">(<span class=\"string\">\"t3\"</span>, <span class=\"number\">20</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Teacher <span class=\"title\">t4</span><span class=\"params\">(<span class=\"string\">\"t4\"</span>, <span class=\"number\">21</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">multimap</span>&lt;<span class=\"built_in\">string</span>, Teacher&gt; m2;</span><br><span class=\"line\">    m2.insert(make_pair(<span class=\"string\">\"js\"</span>, t1));</span><br><span class=\"line\">    m2.insert(make_pair(<span class=\"string\">\"js\"</span>, t2));</span><br><span class=\"line\">    m2.insert(make_pair(<span class=\"string\">\"cpp\"</span>, t3));</span><br><span class=\"line\">    m2.insert(make_pair(<span class=\"string\">\"cpp\"</span>, t4));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">multimap</span>&lt;<span class=\"built_in\">string</span>, Teacher&gt;::iterator it = m2.begin(); it != m2.end(); it ++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"type: \"</span> &lt;&lt; it-&gt;first &lt;&lt; <span class=\"string\">\" info: name:\"</span> &lt;&lt; it-&gt;second.getName() &lt;&lt; <span class=\"string\">\" age: \"</span> &lt;&lt; it-&gt;second.getAge() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    TestMap();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><h4 id=\"for-each\"><a href=\"#for-each\" class=\"headerlink\" title=\"for_each\"></a>for_each</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShowElement</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(T &amp;t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; t &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        num++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showNum</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"num: \"</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showElementFunc</span><span class=\"params\">(T &amp;t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; t &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testCallBack</span><span class=\"params\">()</span> </span>&#123;    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">    v.push_back(<span class=\"number\">1</span>);</span><br><span class=\"line\">    v.push_back(<span class=\"number\">3</span>);</span><br><span class=\"line\">    v.push_back(<span class=\"number\">5</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    for_each(v.begin(), v.end(), ShowElement&lt;<span class=\"keyword\">int</span>&gt;());</span><br><span class=\"line\">    for_each(v.begin(), v.end(), showElementFunc&lt;<span class=\"keyword\">int</span>&gt;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//for_each函数是值传递不是引用传递</span></span><br><span class=\"line\">    ShowElement&lt;<span class=\"keyword\">int</span>&gt; showElement;</span><br><span class=\"line\">    ShowElement&lt;<span class=\"keyword\">int</span>&gt; showElement2 = for_each(v.begin(), v.end(), showElement);</span><br><span class=\"line\">    showElement.showNum(); <span class=\"comment\">//0</span></span><br><span class=\"line\">    showElement2.showNum();<span class=\"comment\">//3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    testCallBack();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"谓词-find-if\"><a href=\"#谓词-find-if\" class=\"headerlink\" title=\"谓词/find_if\"></a>谓词/find_if</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IsDiv</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    T div;</span><br><span class=\"line\">    IsDiv(T &amp;t) &#123;</span><br><span class=\"line\">        div = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span><span class=\"params\">(T &amp;t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (t % div == <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testPred</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">33</span>; i &lt;= <span class=\"number\">66</span>; i++) &#123;</span><br><span class=\"line\">        v.push_back(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> div = <span class=\"number\">5</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;::iterator it =  find_if(v.begin(), v.end(), IsDiv&lt;<span class=\"keyword\">int</span>&gt;(div));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it == v.end()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"没有找到能被 \"</span> &lt;&lt; div &lt;&lt; <span class=\"string\">\" 整除的数\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"能被 \"</span> &lt;&lt; div &lt;&lt; <span class=\"string\">\" 整除的数是 \"</span> &lt;&lt; *it &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    testPred();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"functional\"><a href=\"#functional\" class=\"headerlink\" title=\"functional\"></a>functional</h3><blockquote>\n<p>for_each 的回调函数返回值可以是void, transform 必须有返回值</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"functional\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">increase</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num + <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printV</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;T&gt; v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"vector: \"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; v.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; v[i] &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testFunc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i ++) &#123;</span><br><span class=\"line\">        v.push_back(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = count_if(v.begin(), v.end(), bind2nd(greater&lt;<span class=\"keyword\">int</span>&gt;(), num));</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"大于 \"</span> &lt;&lt; num &lt;&lt; <span class=\"string\">\" 的个数为 \"</span> &lt;&lt; count &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    count = count_if(v.begin(), v.end(), bind2nd(modulus&lt;<span class=\"keyword\">int</span>&gt;(), num));</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"能被 \"</span> &lt;&lt; num &lt;&lt; <span class=\"string\">\" 整除的个数为 \"</span> &lt;&lt; count &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    count = count_if(v.begin(), v.end(), not1(bind2nd(modulus&lt;<span class=\"keyword\">int</span>&gt;(), num)));</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"不能被 \"</span> &lt;&lt; num &lt;&lt; <span class=\"string\">\" 整除的个数为 \"</span> &lt;&lt; count &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    transform(v.begin(), v.end(), v.begin(), increase);</span><br><span class=\"line\">    printV(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[])</span> </span>&#123;</span><br><span class=\"line\">    testFunc();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}