{"tags":[{"name":"JavaScript","permalink":"http://blog.hellolc.com,http://www.wjcun.com/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":7}],"categories":[],"url":"/async/posts/2016/12/22/JavaScript坑总结.json","date":1482406598000,"path":{"year":2016,"month":12,"day":22,"name":"JavaScript坑总结"},"title":"JavaScript坑总结","permalink":"http://blog.hellolc.com,http://www.wjcun.com/2016/12/22/JavaScript坑总结/","content":"<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><ul>\n<li><p>通过函构造函数创建的函数的[[scope]]属性总是唯一的全局对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = <span class=\"number\">20</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">barFD</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 函数声明</span></span><br><span class=\"line\">    alert(x);</span><br><span class=\"line\">    alert(y);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">var</span> barFE = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 函数表达式</span></span><br><span class=\"line\">    alert(x);</span><br><span class=\"line\">    alert(y);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">var</span> barFn = <span class=\"built_in\">Function</span>(<span class=\"string\">'alert(x); alert(y);'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">  barFD(); <span class=\"comment\">// 10, 20</span></span><br><span class=\"line\">  barFE(); <span class=\"comment\">// 10, 20</span></span><br><span class=\"line\">  barFn(); <span class=\"comment\">// 10, \"y\" is not defined</span></span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Function构造不同的是eval()可以干扰作用域链，而Function()更安分守己些。不管你在哪里执行 Function()，它只看到全局作用域。所以其能很好的避免本地变量污染</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var global = “global&quot;;</span><br><span class=\"line\">(function () &#123;</span><br><span class=\"line\">   var local = 1;</span><br><span class=\"line\">   Function(&quot;console.log(typeof local, global);&quot;)(); // undefined global</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果一个属性在对象中没有直接找到, 会现在全局查找, 如果还没找到，查询将在原型链中继续</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.x = <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">foo(); <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -----</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">12</span> </span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.x = <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">foo(); <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>with 声明临时调整的变量, 在跳出with后不会生效, 其他变量在with中修改有效</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>, y = <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">with</span> (&#123;<span class=\"attr\">x</span>: <span class=\"number\">20</span>&#125;) &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">30</span>, y = <span class=\"number\">30</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">  alert(x); <span class=\"comment\">// 30</span></span><br><span class=\"line\">  alert(y); <span class=\"comment\">// 30</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">alert(x); <span class=\"comment\">// 10</span></span><br><span class=\"line\">alert(y); <span class=\"comment\">// 30</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"this指向谁\"><a href=\"#this指向谁\" class=\"headerlink\" title=\"this指向谁\"></a>this指向谁</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    bar: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.a&#125;,</span><br><span class=\"line\">    a: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = foo.bar();</span><br><span class=\"line\">foo.bar() <span class=\"comment\">// 1</span></span><br><span class=\"line\">f() <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>foo.bar() 调用者是foo 所以this指向foo的a</li>\n<li>f() 调用者是window 所以是undefined ===&gt; window.f() </li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  bar: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">foo.bar(); <span class=\"comment\">// Reference, OK =&gt; foo</span></span><br><span class=\"line\">(foo.bar)(); <span class=\"comment\">// Reference, OK =&gt; foo</span></span><br><span class=\"line\"> </span><br><span class=\"line\">(foo.bar = foo.bar)(); <span class=\"comment\">// global?</span></span><br><span class=\"line\">(<span class=\"literal\">false</span> || foo.bar)(); <span class=\"comment\">// global?</span></span><br><span class=\"line\">(foo.bar, foo.bar)(); <span class=\"comment\">// global?</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"是不是实例\"><a href=\"#是不是实例\" class=\"headerlink\" title=\"是不是实例\"></a>是不是实例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> f() <span class=\"keyword\">instanceof</span> f  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> f;&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> f() <span class=\"keyword\">instanceof</span> f  <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数的length\"><a href=\"#函数的length\" class=\"headerlink\" title=\"函数的length\"></a>函数的length</h3><ul>\n<li>函数的形参就是length的值</li>\n<li>arguments 是实参的个数<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a, b, c</span>)</span>&#123;&#125;</span><br><span class=\"line\">test.length<span class=\"comment\">//3</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"with关键字\"><a href=\"#with关键字\" class=\"headerlink\" title=\"with关键字\"></a>with关键字</h3><ul>\n<li>with的作用就是临时改变作用域</li>\n<li>将<code>__proto__</code>属性临时指向<code>Object.prototype</code></li>\n<li>性能较差<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">20</span>, y = <span class=\"number\">20</span>, z = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">1</span>,</span><br><span class=\"line\">    y: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">with</span>(obj) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x, y, z) <span class=\"comment\">//1, 2, 30</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h3><ul>\n<li>这个多余的g函数就死在了返回函数的闭包中了，因此内存问题就出现了。这是因为if语句内部的函数与g是在同一个作用域中被声明的。这种情况下 ，除非我们显式断开对g函数的引用，否则它一直占着内存不放。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var f = (function()&#123;</span><br><span class=\"line\">    var f, g;</span><br><span class=\"line\">    if (true) &#123;</span><br><span class=\"line\">      f = function g()&#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">      f = function g()&#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 设置g为null以后它就不会再占内存了</span><br><span class=\"line\">    g = null;</span><br><span class=\"line\">    return f;</span><br><span class=\"line\">  &#125;)();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Object-preventExtensions-Object-seal-Object-freeze-的区别\"><a href=\"#Object-preventExtensions-Object-seal-Object-freeze-的区别\" class=\"headerlink\" title=\"Object.preventExtensions() Object.seal() Object.freeze()的区别\"></a>Object.preventExtensions() Object.seal() Object.freeze()的区别</h3><pre><code>Object.preventExtensions() 对象不可扩展, 即不可以新增属性或方法, 但可以修改/删除\nObject.seal() 在上面的基础上，对象属性不可删除, 但可以修改\nObject.freeze() 在上面的基础上，对象所有属性只读, 不可修改\n</code></pre><h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ul>\n<li>slice()方法实现的是浅拷贝<ul>\n<li>MDN上的解释: For object references (and not the actual object), slice copies object references into the new array. Both the original and new array refer to the same object. If a referenced object changes, the changes are visible to both the new and original arrays.</li>\n</ul>\n</li>\n<li><p>push() </p>\n<ul>\n<li>对一个数组push数组, 应该先使用concat或者slice数组在push进去, 不然只是引用关系<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [&#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr.slice()</span><br><span class=\"line\">arr[<span class=\"number\">0</span>].a = <span class=\"number\">2</span></span><br><span class=\"line\">arr2[<span class=\"number\">0</span>].a <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">//---</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> allArr = [];</span><br><span class=\"line\">allArr.push(arr);</span><br><span class=\"line\">arr.push(<span class=\"number\">3</span>);</span><br><span class=\"line\">allArr[<span class=\"number\">0</span>] <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> allArr = [];</span><br><span class=\"line\">allArr.push(arr.concat();</span><br><span class=\"line\">arr.push(<span class=\"number\">3</span>);</span><br><span class=\"line\">allArr[<span class=\"number\">0</span>] <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>数组引用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"comment\">//这样不进行拷贝 只是引用关系</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = arr;</span><br><span class=\"line\">arr2.push(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//1, 2, 3, 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">//1, 2, 3, 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这样arr 与 arr2就没有引用关系了</span></span><br><span class=\"line\">arr2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">//1, 2, 3, 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">//1, 2, 3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Array() 与 Array.of() 的区别</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">2</span>) <span class=\"comment\">// [, ,]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">2</span>,<span class=\"number\">3</span>) <span class=\"comment\">//[2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">2</span>) <span class=\"comment\">//[2]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">2</span>,<span class=\"number\">3</span> ) <span class=\"comment\">// [2, 3]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>map与forEach 的区别</p>\n<ul>\n<li>map会根据返回的值改变数组对应的值</li>\n<li>forEach只是单纯的执行一遍函数不会修改数组<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num *<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">arr.forEach(test); <span class=\"comment\">//[1, 2, 3, 4, 5]</span></span><br><span class=\"line\">arr.map(test); <span class=\"comment\">// [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"正则\"><a href=\"#正则\" class=\"headerlink\" title=\"正则\"></a>正则</h3><ul>\n<li><p>(?=) 前向声明</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//需求: 匹配到ab 才能将a换成* 这时就需要用到前向声明了</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'abacadab'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a(?=b)/g</span></span><br><span class=\"line\">str.replace(reg, <span class=\"string\">'*'</span>)<span class=\"comment\">//*bacad*b</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>(?!) 反前向声明</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//需求: 匹配到a 但后面不是b的情况下 才能将a换成* 这时就需要用到反前向声明了</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'abacadab'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/a(?!b)/g</span></span><br><span class=\"line\">str.replace(reg, <span class=\"string\">'*'</span>)<span class=\"comment\">//ab*c*dab</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>前向声明和反前向声明的应用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test4</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明后面的 (?!\\b) 不能以空格开头 必须是3位数字为一组一直到结束</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(?=(?!\\b)(\\d&#123;3&#125;)+$)/g</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> str.replace(reg, <span class=\"string\">','</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"string\">'1234567'</span>) <span class=\"comment\">//1,234,567</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"}