{"tags":[{"name":"You Don't Know JS","permalink":"http://blog.hellolc.com/tags/You-Don-t-Know-JS/","url":"/async/tags/You Don't Know JS.json","count":3}],"categories":[],"url":"/async/posts/2017/10/22/Coercion.json","date":1508653706000,"path":{"year":2017,"month":10,"day":22,"name":"Coercion"},"title":"Coercion","permalink":"http://blog.hellolc.com/2017/10/22/Coercion/","content":"<h2 id=\"Abstract-Value-Operations\"><a href=\"#Abstract-Value-Operations\" class=\"headerlink\" title=\"Abstract Value Operations\"></a>Abstract Value Operations</h2><h3 id=\"JSON-stringify\"><a href=\"#JSON-stringify\" class=\"headerlink\" title=\"JSON.stringify\"></a>JSON.stringify</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">JSON.stringify( undefined ); //&quot;undefined&quot;</div><div class=\"line\">JSON.stringify( function()&#123;&#125; ); //&quot;undefined&quot;</div><div class=\"line\">JSON.stringify( null ); //&quot;null&quot;</div><div class=\"line\">JSON.stringify(</div><div class=\"line\">   [1,undefined,function()&#123;&#125;,4]</div><div class=\"line\">); // &quot;[1,null,null,4]&quot;</div><div class=\"line\">JSON.stringify(</div><div class=\"line\">   &#123; a:2, b:function()&#123;&#125; &#125;</div><div class=\"line\">);// &quot;&#123;&quot;a&quot;:2&#125;&quot;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>从上可以看出, 不同类型的值在不同类型中, <code>JSON.stringify</code>的结果表现形式也不一样, 在数组的<code>undefined</code>, <code>function</code>会被转换成<code>null</code>, 在对象里值为<code>undefined, function</code>的属性会被过滤掉</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = &#123; </div><div class=\"line\">\tb: 42,</div><div class=\"line\">\tc: o,</div><div class=\"line\">    d: function()&#123;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">// create a circular reference inside `a`</div><div class=\"line\">o.e = a;</div><div class=\"line\"></div><div class=\"line\">// would throw an error on the circular reference</div><div class=\"line\">// JSON.stringify( a );</div><div class=\"line\"></div><div class=\"line\">// define a custom JSON value serialization</div><div class=\"line\">a.toJSON = function() &#123;</div><div class=\"line\">    // only include the `b` property for serialization</div><div class=\"line\">    return &#123; b: this.b &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">JSON.stringify( a ); // &quot;&#123;&quot;b&quot;:42&#125;&quot;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果我们对象引用了自身, 再执行<code>JSON.stringify</code>时会报异常, 我们可以给这个对象定义一个<code>toJSON</code>的方法, 返回一个默认对象, 来避免这种情况</p>\n</blockquote>\n<h2 id=\"Explicit-Coercion\"><a href=\"#Explicit-Coercion\" class=\"headerlink\" title=\"Explicit Coercion\"></a>Explicit Coercion</h2><h3 id=\"ToNumber\"><a href=\"#ToNumber\" class=\"headerlink\" title=\"ToNumber\"></a>ToNumber</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Nubmer(true);//1</div><div class=\"line\">Nubmer(false);//0</div><div class=\"line\">Nubmer(undefined);//NaN</div><div class=\"line\">Nubmer(null);//0</div><div class=\"line\">Nubmer(&quot;&quot;);//0</div><div class=\"line\">Nubmer(&quot;false&quot;);//NaN</div><div class=\"line\">Nubmer([]);//0</div><div class=\"line\">Nubmer([&quot;&quot;]);//0</div><div class=\"line\">Nubmer([&quot;&quot;, &quot;&quot;]);//NaN</div><div class=\"line\">Nubmer(&#123;&#125;);//NaN</div><div class=\"line\">Nubmer(function()&#123;&#125;);//NaN</div><div class=\"line\"></div><div class=\"line\">var num1 = true + 1; // 1 + 1 = 2</div><div class=\"line\">var num2 = false + 1; //0 + 1 = 1</div><div class=\"line\">var num3 = undefined + 1; //NaN + 1 = NaN</div><div class=\"line\">var num4 = null + 1; // 0 + 1 = 1</div></pre></td></tr></table></figure>\n<blockquote>\n<p>综上可知, <code>true, false, undefined, null</code>在数学计算中, 强转后的数值不一, 格外需要注意的是<code>undefined</code>会被转换为<code>NaN</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"> var a = &#123;</div><div class=\"line\">        valueOf: function()&#123;</div><div class=\"line\">            return &quot;42&quot;;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        toString: function()&#123;</div><div class=\"line\">            return &quot;4221&quot;;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">    var b = &#123;</div><div class=\"line\">        toString: function()&#123;</div><div class=\"line\">            return &quot;42&quot;;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">var c = [4,2];</div><div class=\"line\">c.toString = function()&#123;</div><div class=\"line\">    return this.join( &quot;&quot; ); // &quot;42&quot;</div><div class=\"line\">&#125;;</div><div class=\"line\">Number( a ); //42</div><div class=\"line\">Number( b ); //42</div><div class=\"line\">Number( c ); //42</div><div class=\"line\">a + &apos;&apos;;//42</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果定义了<code>valueOf</code>, <code>toString</code>, 在强转的时候, 会优先调用<code>valueOf</code>, 如果没有<code>valueOf</code>, 再调用<code>toString</code></p>\n</blockquote>\n<h3 id=\"ToBoolean\"><a href=\"#ToBoolean\" class=\"headerlink\" title=\"ToBoolean\"></a>ToBoolean</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Boolean(&quot;&quot;);//false</div><div class=\"line\">Boolean(NaN);//false</div><div class=\"line\">Boolean(undefined);//false</div><div class=\"line\">Boolean(null);//false</div><div class=\"line\">Boolean(0);//false</div><div class=\"line\">Boolean(-0);//false</div><div class=\"line\"></div><div class=\"line\">Boolean(new Boolean( false ));//true</div><div class=\"line\">Boolean(new Number( 0 ));//true</div><div class=\"line\">Boolean(new String( &quot;&quot; ));//true</div><div class=\"line\">Boolean(&quot;0&quot;);//true</div><div class=\"line\">Boolean([]);//true</div><div class=\"line\">Boolean(&#123;&#125;);//true</div></pre></td></tr></table></figure>\n<blockquote>\n<p>只有上面几种情况会返回<code>false</code>, 其余都会返回<code>true</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Boolean(document.all)//false</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Boolean(document.all)</code>居然返回false, 似乎和上面的结论矛盾, 其实是因为历史原因, <code>document.all</code>其实已经被废弃, 但是又为了兼容有些代码, 浏览器又不能把他删除, 但又不想让<code>if(document.all){}</code>这样的代码执行, 因此让<code>Boolean(document.all)</code>为<code>false</code>, 即使<code>document.all</code>返回的是一个类数组</p>\n</blockquote>\n<h3 id=\"Explicitly-Parsing-Numeric-Strings\"><a href=\"#Explicitly-Parsing-Numeric-Strings\" class=\"headerlink\" title=\"Explicitly: Parsing Numeric Strings\"></a>Explicitly: Parsing Numeric Strings</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = &quot;42&quot;;</div><div class=\"line\">var b = &quot;42px&quot;;</div><div class=\"line\">Number( a );    // 42</div><div class=\"line\">parseInt( a );  // 42</div><div class=\"line\">Number( b );    // NaN</div><div class=\"line\">parseInt( b );  // 42</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>parseInt</code>只要解析是值, 第一个是数字就能解析, 否则就返回<code>NaN</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">parseInt(1/0, 19);//18</div><div class=\"line\">parseInt( 0.000008 );// 0   (&quot;0&quot; from &quot;0.000008&quot;)</div><div class=\"line\">parseInt( 0.0000008 );// 8   (&quot;8&quot; from &quot;8e-7&quot;)</div><div class=\"line\">parseInt( false, 16 );// 250 (&quot;fa&quot; from &quot;false&quot;)</div><div class=\"line\">parseInt( parseInt, 16 );// 15  (&quot;f&quot; from &quot;function..&quot;)</div><div class=\"line\">parseInt( &quot;0x10&quot; );// 16</div><div class=\"line\">parseInt( &quot;103&quot;, 2 ); // 2</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>parseInt()</code>的一些奇怪现象</p>\n</blockquote>\n<h2 id=\"Implicit-Coercion\"><a href=\"#Implicit-Coercion\" class=\"headerlink\" title=\"Implicit Coercion\"></a>Implicit Coercion</h2><h3 id=\"Implicitly-Strings-lt-–-gt-Numbers\"><a href=\"#Implicitly-Strings-lt-–-gt-Numbers\" class=\"headerlink\" title=\"Implicitly: Strings &lt;–&gt; Numbers\"></a>Implicitly: Strings &lt;–&gt; Numbers</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [1,2];</div><div class=\"line\">var b = [3,4];</div><div class=\"line\">a + b; // &quot;1,23,4&quot;</div><div class=\"line\">&#123;&#125; + [];//0</div><div class=\"line\">[] + &#123;&#125;;//&quot;[object Object]&quot;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>以上是一些比较奇怪的现象</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> var a = &#123;</div><div class=\"line\">        valueOf: function() &#123; return 42; &#125;,</div><div class=\"line\">        toString: function() &#123; return 4; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">a + &quot;&quot;; // &quot;42&quot;</div><div class=\"line\">String( a );    // &quot;4&quot;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>以上两者转换是有区别的, <code>a + &quot;&quot;</code>这种形式会优先调用<code>valueOf</code>方法, 而<code>String()</code>直接调用<code>toString</code>方法</p>\n</blockquote>\n"}