{"tags":[{"name":"You Don't Know JS","permalink":"http://blog.hellolc.com,http://www.wjcun.com/tags/You-Don-t-Know-JS/","url":"/async/tags/You Don't Know JS.json","count":5}],"categories":[],"url":"/async/posts/2017/10/17/Values.json","date":1508241714000,"path":{"year":2017,"month":10,"day":17,"name":"Values"},"title":"Values","permalink":"http://blog.hellolc.com,http://www.wjcun.com/2017/10/17/Values/","content":"<h2 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [];</span><br><span class=\"line\">arr[0] = 0;</span><br><span class=\"line\">arr[2] = 2;</span><br><span class=\"line\">arr.length; //3</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如上当我们跳过1索引位, 但是数组的长度还是变成了3而不是2, 索引1位置的值为<code>undefined</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [];</span><br><span class=\"line\">arr[&quot;hello&quot;] = &quot;world&quot;;</span><br><span class=\"line\">arr.length; //0</span><br><span class=\"line\">arr[&quot;2&quot;] = 2;</span><br><span class=\"line\">arr.length; //3</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如上当设置为字符串为key时, 不会算在数组长度里, 但是如果设置的是一个字符串的数值, 会为强转成数值</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.prototype.slice.call(arrayLike);</span><br><span class=\"line\">//等价于es6</span><br><span class=\"line\">Array.from(arrayLike)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如上是将类数组(dom对象数组或者函数的arguments参数数组)的数组转换为数组</p>\n</blockquote>\n<h2 id=\"Strings\"><a href=\"#Strings\" class=\"headerlink\" title=\"Strings\"></a>Strings</h2><blockquote>\n<p>字符串, 有点像字符数组, 他们有一些公用方法, 但不完全一样, 比如字符串是无法改变自身位置, 但数组是可以的</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;hello&quot;;</span><br><span class=\"line\">str.concat(&quot;~~&quot;, &quot;world&quot;);//hello~~world</span><br><span class=\"line\"></span><br><span class=\"line\">str.join;//undefined</span><br><span class=\"line\">Array.prototype.join.call(str, &apos;-&apos;);//h-e-l-l-o</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如上我们发现我们能使用部分数组的方法, 但是不能使用有些数组方法(比如reverse), 这是为什么呢? 因为join方法是返回一个新数组的, 而reverse是改变数组本身, 又因为字符串是无法改变自身位置的, 所以reverse无法使用</p>\n</blockquote>\n<p>##Numbers<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var num = .42;</span><br><span class=\"line\">//等价于如下</span><br><span class=\"line\">num = 0.42</span><br><span class=\"line\"></span><br><span class=\"line\">var num2 = 42.;</span><br><span class=\"line\">//等价于如下</span><br><span class=\"line\">num2 = 42.0;</span><br><span class=\"line\"></span><br><span class=\"line\">var num3 = 4E2; //400</span><br><span class=\"line\"></span><br><span class=\"line\">//.toFiex保留几位小数</span><br><span class=\"line\">var num4 = 42.59;</span><br><span class=\"line\">num4.toFixed(0)//43</span><br><span class=\"line\">num4.toFixed(1)//42.6</span><br><span class=\"line\">num4.toFixed(2)//42.59</span><br><span class=\"line\">num4.toFixed(4)//42.590</span><br><span class=\"line\">num4.toFixed(5)//42.5900</span><br><span class=\"line\"></span><br><span class=\"line\">//.toPrecision保留几位数</span><br><span class=\"line\">var a = 42.59;</span><br><span class=\"line\">a.toPrecision( 1 ); // &quot;4e+1&quot;</span><br><span class=\"line\">a.toPrecision( 2 ); // &quot;43&quot;</span><br><span class=\"line\">a.toPrecision( 3 ); // &quot;42.6&quot;</span><br><span class=\"line\">a.toPrecision( 4 ); // &quot;42.59&quot;</span><br><span class=\"line\">a.toPrecision( 5 ); // &quot;42.590&quot;</span><br><span class=\"line\">a.toPrecision( 6 ); // &quot;42.5900&quot;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x12//十六进制</span><br><span class=\"line\">0o12//八进制 在非严格模式下可以使用012, 但已废弃, 不建议再使用</span><br><span class=\"line\">0b11//二进制</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0.1 + 0.2 == 0.30000000000000004</span><br><span class=\"line\"></span><br><span class=\"line\">function numbersCloseEnoughToEqual(n1,n2) &#123;</span><br><span class=\"line\">        return Math.abs( n1 - n2 ) &lt; Number.EPSILON;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 0.1 + 0.2;</span><br><span class=\"line\">var b = 0.3;</span><br><span class=\"line\">numbersCloseEnoughToEqual( a, b );</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如上得知, js的小数计算结果有偏差, 所以可以使用<code>Number.EPSILON</code>来计算是否相等</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.MAX_VALUE;//1.798e+308</span><br><span class=\"line\">Number.MIN_VALUE;//5e-324</span><br><span class=\"line\">Number.MAX_SAFE_INTEGER;//9007199254740991= 2^53 - 1</span><br><span class=\"line\">Number.MIN_SAFE_INTEGER;//-9007199254740991</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>js整数最大用53位表示, 所以如果计算64位数时需要额外引入库</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.isInteger( 42 );     // true</span><br><span class=\"line\">Number.isInteger( 42.000 ); // true</span><br><span class=\"line\">Number.isInteger( 42.3 );   // false</span><br></pre></td></tr></table></figure>\n<h2 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h2><blockquote>\n<p>undefined是一个标识符, 而null是关键字</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    &quot;use strict&quot;;</span><br><span class=\"line\">    var undefined = 2;</span><br><span class=\"line\">    console.log( undefined ); // 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = void 0;</span><br><span class=\"line\">foo;//undefined</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以通过void获取undefined值, void _ 会一直返回undefined值</p>\n</blockquote>\n<h2 id=\"NaN-Not-a-Number\"><a href=\"#NaN-Not-a-Number\" class=\"headerlink\" title=\"NaN - Not a Number\"></a>NaN - Not a Number</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeof NaN // number</span><br><span class=\"line\"></span><br><span class=\"line\">NaN == NaN; //undefined</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isNaN(NaN); //true</span><br><span class=\"line\">isNaN(1); //false</span><br><span class=\"line\">isNaN(&apos;1&apos;); //false</span><br><span class=\"line\">isNaN(&apos;hello&apos;); //true</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以上得知, isNaN是用来判别是不是数字, 如果不是数字就返回true, 否则就是true</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Number.isNaN(NaN); //true</span><br><span class=\"line\">Number.isNaN(1); //false</span><br><span class=\"line\">Number.isNaN(&apos;1&apos;); //false</span><br><span class=\"line\">Number.isNaN(&apos;hello&apos;); //false</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>es6提供的<code>Number.isNaN</code>修复了这个问题</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (!Number.isNaN) &#123;</span><br><span class=\"line\">        Number.isNaN = function(n) &#123;</span><br><span class=\"line\">            return (</span><br><span class=\"line\">                typeof n === &quot;number&quot; &amp;&amp;</span><br><span class=\"line\">                window.isNaN( n )</span><br><span class=\"line\">\t\t\t); </span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (!Number.isNaN) &#123;</span><br><span class=\"line\">\t Number.isNaN = function(n) &#123;</span><br><span class=\"line\">\t \t//只有NaN不等于自身</span><br><span class=\"line\">        return n !== n;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>两种es6 isNaN的polyfill</p>\n</blockquote>\n<h3 id=\"Zeros\"><a href=\"#Zeros\" class=\"headerlink\" title=\"Zeros\"></a>Zeros</h3><blockquote>\n<p>js里有0和-0, 它的用处不是很大, 但是在某些运动时刻, 可以通过正负值, 来判断运动方向</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 0 / -3; // -0</span><br><span class=\"line\">var b = 0 * -3; // -0</span><br><span class=\"line\"></span><br><span class=\"line\">a.toString(); //&quot;0&quot;</span><br><span class=\"line\">a + &quot;&quot;; //&quot;0&quot;</span><br><span class=\"line\">String( a ); //&quot;0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">JSON.stringify( a );   // &quot;0&quot;</span><br><span class=\"line\">JSON.parse( &quot;-0&quot; ); // -0</span><br><span class=\"line\"></span><br><span class=\"line\">Number( &quot;-0&quot; );     // -0</span><br><span class=\"line\"></span><br><span class=\"line\">-0 === 0;//true</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isNegZero(n) &#123;</span><br><span class=\"line\">    n = Number( n );</span><br><span class=\"line\">    return (n === 0) &amp;&amp; (1 / n === -Infinity);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">isNegZero( -0 );// true</span><br><span class=\"line\">isNegZero( 0 / -3 );// true</span><br><span class=\"line\">isNegZero( 0 );// false</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以通过上面的方法判断是否为负0</p>\n</blockquote>\n<h3 id=\"Special-Equality\"><a href=\"#Special-Equality\" class=\"headerlink\" title=\"Special Equality\"></a>Special Equality</h3><blockquote>\n<p>es6提供的提供了<code>Object.is</code>方法可以来判断两值是否相等<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 2 / &quot;foo&quot;;</span><br><span class=\"line\">var b = -3 * 0;</span><br><span class=\"line\"></span><br><span class=\"line\">Object.is( a, NaN ); //true</span><br><span class=\"line\">Object.is( b, -0 ); //true</span><br><span class=\"line\">Object.is( b, 0 ); // false</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (!Object.is) &#123;</span><br><span class=\"line\">        Object.is = function(v1, v2) &#123;</span><br><span class=\"line\">            // test for `-0`</span><br><span class=\"line\">            if (v1 === 0 &amp;&amp; v2 === 0) &#123;</span><br><span class=\"line\">                return 1 / v1 === 1 / v2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // test for `NaN`</span><br><span class=\"line\">            if (v1 !== v1) &#123;</span><br><span class=\"line\">                return v2 !== v2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // everything else</span><br><span class=\"line\">            return v1 === v2;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>polyfill如上</p>\n</blockquote>\n"}