{"tags":[{"name":"深入React技术栈","permalink":"http://blog.hellolc.com/tags/深入React技术栈/","url":"/async/tags/深入React技术栈.json","count":3}],"categories":[],"url":"/async/posts/2017/10/10/初入React世界.json","date":1507596438000,"path":{"year":2017,"month":10,"day":10,"name":"初入React世界"},"title":"初入React世界","permalink":"http://blog.hellolc.com/2017/10/10/初入React世界/","content":"<h2 id=\"React生命周期\"><a href=\"#React生命周期\" class=\"headerlink\" title=\"React生命周期\"></a>React生命周期</h2><ul>\n<li>constructor</li>\n<li>static getDerivedStateFromProps</li>\n<li>componentWillMount / UNSAFE_componentWillMount</li>\n<li>render</li>\n<li>componnetDidMount</li>\n<li>componentWillReceiveProps / UNSAFE_componentWillReceiveProps</li>\n<li>static getDerivedStateFromProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate / UNSAFE_componentWillUpdate</li>\n<li>render</li>\n<li>getSnapshotBeforeUpdate</li>\n<li>componnetDidUpdate</li>\n<li>componentWillUnmount</li>\n<li>componentDidCatch</li>\n</ul>\n<h3 id=\"componnetDidMount\"><a href=\"#componnetDidMount\" class=\"headerlink\" title=\"componnetDidMount\"></a>componnetDidMount</h3><blockquote>\n<p>绑定事件, ajax请求尽量在这个阶段调用; 此阶段虽然在render之后被调用, 实质上仅仅生成了dom树, 还没有被渲染到页面上, 因此在调用setState, 页面上不会出现重复渲染</p>\n</blockquote>\n<h3 id=\"shouldComponentUpdate\"><a href=\"#shouldComponentUpdate\" class=\"headerlink\" title=\"shouldComponentUpdate\"></a>shouldComponentUpdate</h3><blockquote>\n<p>此阶段控制页面是否重新渲染; 可以通过继承 <code>React.PureComponent</code>, 它实现了prop和state的浅比较; react不推荐我们在这阶段进行深度比较, 或是通过json.stringify进行比较, 这样很耗性能;</p>\n</blockquote>\n<h3 id=\"getSnapshotBeforeUpdate\"><a href=\"#getSnapshotBeforeUpdate\" class=\"headerlink\" title=\"getSnapshotBeforeUpdate\"></a>getSnapshotBeforeUpdate</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollingList</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  listRef = React.createRef();</span><br><span class=\"line\"></span><br><span class=\"line\">  getSnapshotBeforeUpdate(prevProps, prevState) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Are we adding new items to the list?</span></span><br><span class=\"line\">    <span class=\"comment\">// Capture the current height of the list so we can adjust scroll later.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevProps.list.length &lt; <span class=\"keyword\">this</span>.props.list.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listRef.current.scrollHeight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidUpdate(prevProps, prevState, snapshot) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// If we have a snapshot value, we've just added new items.</span></span><br><span class=\"line\">    <span class=\"comment\">// Adjust scroll so these new items don't push the old ones out of view.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (snapshot !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listRef.current.scrollTop +=</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.listRef.current.scrollHeight - snapshot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div ref=&#123;<span class=\"keyword\">this</span>.listRef&#125;&gt;&#123;<span class=\"comment\">/* ...contents... */</span>&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"componentDidCatch\"><a href=\"#componentDidCatch\" class=\"headerlink\" title=\"componentDidCatch\"></a>componentDidCatch</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ErrorBoundary</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">hasError</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidCatch(error, info) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Display fallback UI</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">hasError</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// You can also log the error to an error reporting service</span></span><br><span class=\"line\">    logErrorToMyService(error, info);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.hasError) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// You can render any custom fallback UI</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &lt;h1&gt;Something went wrong.&lt;/h1&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.props.children;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;ErrorBoundary&gt;</span><br><span class=\"line\">  &lt;MyWidget /&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/ErrorBoundary&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"ReactDom\"><a href=\"#ReactDom\" class=\"headerlink\" title=\"ReactDom\"></a>ReactDom</h2><h3 id=\"ReactDOMServer-renderToString-element\"><a href=\"#ReactDOMServer-renderToString-element\" class=\"headerlink\" title=\"ReactDOMServer.renderToString(element)\"></a>ReactDOMServer.renderToString(element)</h3><p>在服务端渲染react的html, 加速首屏渲染和SEO优化</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ReactDOMServer <span class=\"keyword\">from</span> <span class=\"string\">'react-dom/server'</span>;</span><br><span class=\"line\">ReactDOMServer.renderToString(element)</span><br></pre></td></tr></table></figure>\n<h3 id=\"ReactDOM-hydrate-element-container-callback\"><a href=\"#ReactDOM-hydrate-element-container-callback\" class=\"headerlink\" title=\"ReactDOM.hydrate(element, container[, callback])\"></a>ReactDOM.hydrate(element, container[, callback])</h3><p>可以对服务器渲染的容器挂载事件</p>\n<h2 id=\"React-与-DOM\"><a href=\"#React-与-DOM\" class=\"headerlink\" title=\"React 与 DOM\"></a>React 与 DOM</h2><ul>\n<li>findDOMNode 需要react节点</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">import ReactDOM from &apos;react-dom&apos;;</span><br><span class=\"line\">class App extends Component &#123; </span><br><span class=\"line\"> componentDidMount() &#123;</span><br><span class=\"line\"> \t// this 为当前组件的实例</span><br><span class=\"line\">\tconst dom = ReactDOM.findDOMNode(this); </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> render() &#123;&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>unmountComponentAtNode 卸载react节点</li>\n</ul>\n<h2 id=\"ReactDOM-的不稳定方法\"><a href=\"#ReactDOM-的不稳定方法\" class=\"headerlink\" title=\"ReactDOM 的不稳定方法\"></a>ReactDOM 的不稳定方法</h2><ul>\n<li>render: ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback)</li>\n<li>unstable_renderSubtreeIntoContainer: ReactMount._renderSubtreeIntoContainer(parentComponent,<br>nextElement, container, callback)</li>\n</ul>\n<blockquote>\n<p>unstable_renderSubtreeIntoContainer 与 render 方法很相似，但 render 方法缺少一个插入某个节点的参数</p>\n</blockquote>\n<h3 id=\"ReactDOM-render-与-ReactDOM-createPortal-的区别\"><a href=\"#ReactDOM-render-与-ReactDOM-createPortal-的区别\" class=\"headerlink\" title=\"ReactDOM.render 与 ReactDOM.createPortal 的区别\"></a>ReactDOM.render 与 ReactDOM.createPortal 的区别</h3><ol>\n<li>createPortal 可以获取父级的context</li>\n<li>createPortal 的事件可以被传递给父级</li>\n</ol>\n"}