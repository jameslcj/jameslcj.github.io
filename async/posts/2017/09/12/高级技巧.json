{"tags":[{"name":"javaScript高级程序设计笔记","permalink":"http://blog.hellolc.com/tags/javaScript高级程序设计笔记/","url":"/async/tags/javaScript高级程序设计笔记.json","count":17}],"categories":[],"url":"/async/posts/2017/09/12/高级技巧.json","date":1505184037000,"path":{"year":2017,"month":9,"day":12,"name":"高级技巧"},"title":"高级技巧","permalink":"http://blog.hellolc.com/2017/09/12/高级技巧/","content":"<h2 id=\"高级函数\"><a href=\"#高级函数\" class=\"headerlink\" title=\"高级函数\"></a>高级函数</h2><h3 id=\"安全的类型检测\"><a href=\"#安全的类型检测\" class=\"headerlink\" title=\"安全的类型检测\"></a>安全的类型检测</h3><blockquote>\n<p>使用<code>typeof</code>检测数组函数等返回都是<code>object</code>, 无法获取正确类型, 所以可以使用下面的方法获取正确的类型信息 </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var value = []</span><br><span class=\"line\">Object.prototype.toString.call(value)//&quot;[object Array]&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"安全构造函数\"><a href=\"#安全构造函数\" class=\"headerlink\" title=\"安全构造函数\"></a>安全构造函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Polygon(sides) &#123;</span><br><span class=\"line\">\tif  (this instanceof Polygon) &#123;</span><br><span class=\"line\">\t\tthis.sides = sides;</span><br><span class=\"line\">\t\tthis.getArea = function() &#123;</span><br><span class=\"line\">\t\t\treturn 0;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\treturn new Polygon(sides);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Rectangle(width, height) &#123;</span><br><span class=\"line\">\tPolygon.call(this, 2);</span><br><span class=\"line\">\tthis.width = width;</span><br><span class=\"line\">\tthis.height = height;</span><br><span class=\"line\">\tthis.getArea = function() &#123;</span><br><span class=\"line\">\t\treturn this.width *  this.height;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Rectangle.prototype = new Polygon();</span><br><span class=\"line\">var rect = new Rectangle(5, 10);</span><br><span class=\"line\">rect.sides;//2</span><br></pre></td></tr></table></figure>\n<h3 id=\"惰性载入函数\"><a href=\"#惰性载入函数\" class=\"headerlink\" title=\"惰性载入函数\"></a>惰性载入函数</h3><blockquote>\n<p>有时候函数的具体逻辑, 会根据环境不同而不同, 因此我们可以使用惰性载入函数, 在页面加载的时候就能自运行获取正确的函数, 而不用再调用时在去判断生成</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var createXHR = (function() &#123;</span><br><span class=\"line\">\tif (typeof XMLHttpRequest != &quot;undefined&quot;) &#123;</span><br><span class=\"line\">\t\treturn function() &#123;</span><br><span class=\"line\">\t\t\treturn new XMLHttpRequest();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\treturn function() &#123;</span><br><span class=\"line\">\t\t\t//...</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数绑定\"><a href=\"#函数绑定\" class=\"headerlink\" title=\"函数绑定\"></a>函数绑定</h3><blockquote>\n<p><code>this</code>指向被改变</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var handler = &#123;</span><br><span class=\"line\">\tmessage: &apos;event handle&apos;,</span><br><span class=\"line\">\thandleClick: function(event) &#123;</span><br><span class=\"line\">\t\tconsole.log(this.message);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">EventUtil.addHandler(btn, &quot;click&quot;, handler.handleClick); // undefined</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用<code>bind</code>纠正<code>this</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var handler = &#123;</span><br><span class=\"line\">\tmessage: &apos;event handle&apos;,</span><br><span class=\"line\">\thandleClick: function(event) &#123;</span><br><span class=\"line\">\t\tconsole.log(this.message);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function bind(fn, context) &#123;</span><br><span class=\"line\">\treturn function() &#123;</span><br><span class=\"line\">\t\tfn.apply(context, arguments)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EventUtil.addHandler(btn, &quot;click&quot;, bind(handler.handleClick, handler)); // event handle</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数柯里化\"><a href=\"#函数柯里化\" class=\"headerlink\" title=\"函数柯里化\"></a>函数柯里化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(num1, num2) &#123;</span><br><span class=\"line\">\treturn num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function curriedAdd(num2) &#123;</span><br><span class=\"line\">\treturn add(5, num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(add((2, 3)))//5</span><br><span class=\"line\">console.log(curriedAdd(3));//8</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>柯里化</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function curry(fn) &#123;</span><br><span class=\"line\">\tvar args = Array.prototype.slice.call(arguments, 1);</span><br><span class=\"line\">\treturn function() &#123;</span><br><span class=\"line\">\t\tvar innerArgs = Array.prototype.slice.call(arguments);</span><br><span class=\"line\">\t\tvar finalArgs = args.concat(innerArgs);</span><br><span class=\"line\">\t\tfn.apply(null, finalArgs);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var curriedAdd = curry(add, 5);</span><br><span class=\"line\">console.log(curriedAdd(3));//8</span><br></pre></td></tr></table></figure>\n<h2 id=\"防篡改对象\"><a href=\"#防篡改对象\" class=\"headerlink\" title=\"防篡改对象\"></a>防篡改对象</h2><h3 id=\"不可扩展对象\"><a href=\"#不可扩展对象\" class=\"headerlink\" title=\"不可扩展对象\"></a>不可扩展对象</h3><blockquote>\n<p><code>Object.preventExtensions</code>可以使对象不能再扩展属性, 但可以对已有属性进行修改删除</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;a: &apos;a&apos;, b: &apos;b&apos;, c:&apos;c&apos;&#125;;</span><br><span class=\"line\">Object.isExtensible(obj);//true</span><br><span class=\"line\"></span><br><span class=\"line\">Object.preventExtensions(obj);</span><br><span class=\"line\">Object.isExtensible(obj);//false</span><br><span class=\"line\">obj.d = &apos;d&apos;;</span><br><span class=\"line\">consolelog(obj);//&#123;a: &apos;a&apos;, b: &apos;b&apos;, c:&apos;c&apos;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"密封对象\"><a href=\"#密封对象\" class=\"headerlink\" title=\"密封对象\"></a>密封对象</h3><blockquote>\n<p>被<code>seal</code>的对象, <code>[[Configurable]]</code>被设置为false, 因此不能删除属性和方法, 也不能新增属性和方法, 但可以修改属性和方法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;name: &apos;zhichen&apos;&#125;;</span><br><span class=\"line\">Object.isExtensible(person);//true</span><br><span class=\"line\">Object.isSealed(person);//false</span><br><span class=\"line\"></span><br><span class=\"line\">Object.seal(person);</span><br><span class=\"line\">Object.isExtensible(person);//false</span><br><span class=\"line\">Object.isSealed(person);//true</span><br><span class=\"line\"></span><br><span class=\"line\">person.age = 18;</span><br><span class=\"line\">person.name = &apos;lc&apos;</span><br><span class=\"line\">delete person.name;</span><br><span class=\"line\">console.log(person);//&#123;name: &apos;lc&apos;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"冻结的对象\"><a href=\"#冻结的对象\" class=\"headerlink\" title=\"冻结的对象\"></a>冻结的对象</h3><blockquote>\n<p>被<code>freeze</code>的对象, 不能进行扩展, <code>[[writable]]</code>特性会被设置为false, 如果定义<code>[[Set]]</code>函数, 访问器属性仍可以写的</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;name: &apos;zhichen&apos;&#125;;</span><br><span class=\"line\">Object.isExtensible(person);//true</span><br><span class=\"line\">Object.isSealed(person);//false</span><br><span class=\"line\">Object.isFrozen(person);//false</span><br><span class=\"line\"></span><br><span class=\"line\">Object.freeze(person);</span><br><span class=\"line\">Object.isExtensible(person);//false</span><br><span class=\"line\">Object.isSealed(person);//true</span><br><span class=\"line\">Object.isFrozen(person);//true</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">person.age = 18;</span><br><span class=\"line\">person.name = &apos;lc&apos;</span><br><span class=\"line\">delete person.name;</span><br><span class=\"line\">console.log(person);//&#123;name: &apos;zhichen&apos;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"高级定时器\"><a href=\"#高级定时器\" class=\"headerlink\" title=\"高级定时器\"></a>高级定时器</h2><blockquote>\n<p><code>setTimeout</code>和<code>setInterval</code> 加入设置时间为150ms, 不表示在150ms后立即执行, 而是在150ms后被加入到执行队列, 如果队列没有其他任务, 就立即执行, 如果有其他任务, 等其他任务执行完毕后才能执行</p>\n</blockquote>\n<h3 id=\"重复的定时器\"><a href=\"#重复的定时器\" class=\"headerlink\" title=\"重复的定时器\"></a>重复的定时器</h3><blockquote>\n<p><code>setInterval</code>为了避免因为任务等待导致在同一时间重复执行, 因此<code>setInterval</code>被加入进程队列前会先检测是否有次任务, 如果有此任务, 就不会再被添加到进程队列中, 所以有些间隔会被跳过</p>\n</blockquote>\n<h3 id=\"Yielding-Processes\"><a href=\"#Yielding-Processes\" class=\"headerlink\" title=\"Yielding Processes\"></a>Yielding Processes</h3><blockquote>\n<p>如果要操作一个数组里的数据, 会导致阻塞, 如果可以改成异步的话, 可以使用如下方式</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function chunk(array, process, context) &#123;</span><br><span class=\"line\">\tsetTimeout(function() &#123;</span><br><span class=\"line\">\t\tvar item = array.shift();</span><br><span class=\"line\">\t\tprocess.call(context, item);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t//如果还有数据 就再调自身循环</span><br><span class=\"line\">\t\tif (array.length &gt; 0) &#123;</span><br><span class=\"line\">\t\t\tsetTimeout(arguments.callee, 100)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;, 100)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}