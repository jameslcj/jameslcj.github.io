{"tags":[{"name":"You Don't Know JS","permalink":"http://blog.hellolc.com/tags/You-Don-t-Know-JS/","url":"/async/tags/You Don't Know JS.json","count":5}],"categories":[],"url":"/async/posts/2017/12/02/Generators.json","date":1512195421000,"path":{"year":2017,"month":12,"day":2,"name":"Generators"},"title":"Generators","permalink":"http://blog.hellolc.com/2017/12/02/Generators/","content":"<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function *foo(x) &#123;</div><div class=\"line\">\tvar y = x * (yield function() &#123;return &quot;hello world&quot;;&#125;); </div><div class=\"line\">\treturn y;</div><div class=\"line\">&#125;</div><div class=\"line\">var it = foo( 6 ); //将6作为参数调用foo方法 并返回一个迭代器对象</div><div class=\"line\">// start `foo(..)`</div><div class=\"line\">var res1 = it.next(); //开始执行函数, 直到碰到yield 就停住了, 等待下一步指令; 并返回一个迭代器对象值为 &#123;done: false, value: ƒ&#125;, done表示迭代器还没有结束, value表示yield后面的内容; 一般浏览器都会忽略掉第一个next传入的参数</div><div class=\"line\">res1.value(); //上面yield后面的内容是一个函数, 所以调用后, 返回&quot;hello world&quot;</div><div class=\"line\">var res2 = it.next( 7 ); //将7 作为yield的返回值, 并继续执行至下一个yield或是结束</div><div class=\"line\">res2.value; //因此 6 * 7 = 42</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function* test() &#123;</div><div class=\"line\">\tyield 1;</div><div class=\"line\">\tyield 2;</div><div class=\"line\">\tyield 3;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var it = test();</div><div class=\"line\">for (var v of it) &#123;</div><div class=\"line\">\tconsole.log(v)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>for (var v of it)</code> 会自动执行迭代器的next方法, 直到返回的对象<code>done: true</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">for (var v of it) &#123;&#125;</div><div class=\"line\">//可以转化为如下</div><div class=\"line\">for (var ret; (ret = it.next()) &amp;&amp; !ret.done; ) &#123;&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [1, 3, 5, 7];</div><div class=\"line\">for (var v of arr) &#123;</div><div class=\"line\">\tconsole.log(v);//1 3 5 7</div><div class=\"line\">&#125;</div><div class=\"line\">// 等价于如下</div><div class=\"line\">var it = arr[Symbol.iterator]()</div><div class=\"line\">it.next();//&#123;value: 1, done: false&#125;</div><div class=\"line\">it.next();//&#123;value: 3, done: false&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">function* test() &#123;</div><div class=\"line\">\ttry &#123;</div><div class=\"line\">\t\tvar nextVal = 1;</div><div class=\"line\">\t\twhile (true) &#123;</div><div class=\"line\">\t\t\tnextVal += 3;</div><div class=\"line\">\t\t\tyield nextVal;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125; finally &#123;</div><div class=\"line\">\t\tconsole.log(&apos;finally...&apos;)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var it = test();</div><div class=\"line\">for (var v of it) &#123;</div><div class=\"line\">\tconsole.log(v)</div><div class=\"line\">\tif (v &gt; 30 ) &#123;</div><div class=\"line\">\t\tvar result = it.return(&quot;hello world&quot;)</div><div class=\"line\">\t\tconsole.log(&quot;result: &quot;, result)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">/**</div><div class=\"line\"> * 输出结果: 1 4 .... finally... result: &#123;value: &quot;hello world&quot;, done: true&#125;</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<blockquote>\n<p>当我们调用迭代器it的return方法时, 迭代器会将it.next的结果done设置为true, 来终端迭代器迭代下去, 然后会执行迭代器里的finally方法(如果有), 最后返回的value的值等于我们return传递进去的值</p>\n</blockquote>\n<h2 id=\"自动执行迭代器\"><a href=\"#自动执行迭代器\" class=\"headerlink\" title=\"自动执行迭代器\"></a>自动执行迭代器</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div></pre></td><td class=\"code\"><pre><div class=\"line\">function ajax(delay) &#123;</div><div class=\"line\">    return new Promise(function(resolve, reject) &#123;</div><div class=\"line\">        //延迟返回 模拟异步</div><div class=\"line\">        setTimeout(() =&gt; &#123;</div><div class=\"line\">            resolve(&quot;ajax data&quot;);</div><div class=\"line\">        &#125;, delay)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function *test(arg) &#123;</div><div class=\"line\">    var ajaxRes = yield ajax(arg);</div><div class=\"line\">    return yield ajaxRes;</div><div class=\"line\">&#125;</div><div class=\"line\">/**</div><div class=\"line\"> * 模拟co库写的一个迭代器递归执行方法</div><div class=\"line\"> **/</div><div class=\"line\">function co(gen) &#123;</div><div class=\"line\">    //获取初始化参数</div><div class=\"line\">    var args = [].slice.call(arguments, 1);</div><div class=\"line\">    //使用当前作用域初始化gen获取迭代器对象it, 下面it会作为一个闭包对象一直被递归调用</div><div class=\"line\">    var it = gen.apply(this, args);</div><div class=\"line\">    //返回一个处理好的promise</div><div class=\"line\">    return Promise.resolve().then(function handleNext(value) &#123;</div><div class=\"line\">        //将上一次promise返回的结果作为参数传递给迭代器, 第一次value为undefined, 一般浏览器会忽略</div><div class=\"line\">        var next = it.next(value);</div><div class=\"line\">        console.log(&quot;next: &quot;, next);</div><div class=\"line\">        </div><div class=\"line\">        //函数自运行</div><div class=\"line\">        return (function handleResult(next) &#123;</div><div class=\"line\">            //判断迭代器是否完成 如果完成返回最后结果</div><div class=\"line\">            if (next.done) &#123;</div><div class=\"line\">                return next.value;</div><div class=\"line\">            &#125; else if (typeof next.value == &apos;function&apos;) &#123;</div><div class=\"line\">\t\t\t\t//处理thunk类型的回调</div><div class=\"line\">\t\t\t\t//返回一个promise</div><div class=\"line\">\t\t\t\treturn new Promise(function(resolve, reject) &#123;</div><div class=\"line\">\t\t\t\t\t//给thunk传递回调函数</div><div class=\"line\">\t\t\t\t\tnext.value(function(err, msg) &#123;</div><div class=\"line\">\t\t\t\t\t\tif (err) &#123;</div><div class=\"line\">\t\t\t\t\t\t\treject(err);</div><div class=\"line\">\t\t\t\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\t\t\t\tresolve(msg);</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;)</div><div class=\"line\">\t\t\t\t&#125;).then(function() &#123;</div><div class=\"line\">                    //如果promise返回成功, 就递归调用handleNext来处理it迭代器至完成</div><div class=\"line\">                    handleNext,</div><div class=\"line\"></div><div class=\"line\">                    //异常处理</div><div class=\"line\">                    function handleErr(err) &#123;</div><div class=\"line\">                        return Promise.resolve(</div><div class=\"line\">                            //处理异常</div><div class=\"line\">                            it.throw(err)</div><div class=\"line\">                        ).then(</div><div class=\"line\">                            //继续处理异常处理的结果</div><div class=\"line\">                            handleResult</div><div class=\"line\">                        )</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t&#125;)</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">                //否则就递归调用迭代器</div><div class=\"line\">                //通过promise处理next.value, 如果next.value是非promise对象就会直接进入then, 否则就等待promise回调then</div><div class=\"line\">                //这里的next.value一般都是异步处理, 例如ajax操作</div><div class=\"line\">                return Promise.resolve(next.value).then(</div><div class=\"line\">                    //如果promise返回成功, 就递归调用handleNext来处理it迭代器至完成</div><div class=\"line\">                    handleNext,</div><div class=\"line\">\t\t\t\t\t</div><div class=\"line\">                    //异常处理</div><div class=\"line\">                    function handleErr(err) &#123;</div><div class=\"line\">                        return Promise.resolve(</div><div class=\"line\">                            //处理异常</div><div class=\"line\">                            it.throw(err)</div><div class=\"line\">                        ).then(</div><div class=\"line\">                            //继续处理异常处理的结果</div><div class=\"line\">                            handleResult</div><div class=\"line\">                        )</div><div class=\"line\">                    &#125;</div><div class=\"line\">                );</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)(next)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\">co(test, 3000).then(function(res) &#123;</div><div class=\"line\">    console.log(&quot;res: &quot;,res)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>上面是一个自动递归处理迭代器的方法, 方法类似co库</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">funcion *foo() &#123;</div><div class=\"line\">\tvar r1 = yield ajax(&apos;url1&apos;);</div><div class=\"line\">\tvar r2 = yield ajax(&apos;url2&apos;);</div><div class=\"line\"></div><div class=\"line\">\tvar r3 = yield ajax(r1+r2);</div><div class=\"line\">\treturn r3;</div><div class=\"line\">&#125;</div><div class=\"line\">co(foo);</div><div class=\"line\"></div><div class=\"line\">//可以优化为下面</div><div class=\"line\">funcion *foo() &#123;</div><div class=\"line\"></div><div class=\"line\">\tvar p1 = ajax(&apos;url1&apos;);</div><div class=\"line\">\tvar p2 = ajax(&apos;url2&apos;);</div><div class=\"line\">\tvar r1 = yield p1</div><div class=\"line\">\tvar r2 = yield p2</div><div class=\"line\"></div><div class=\"line\">\tvar r3 = yield ajax(r1+r2);</div><div class=\"line\">\treturn r3;</div><div class=\"line\">&#125;</div><div class=\"line\">co(foo);</div><div class=\"line\">// 上面那方法可以理解如下</div><div class=\"line\">funcion *foo() &#123;</div><div class=\"line\">\tvar results = yield Promise.all([ajax(&apos;url1&apos;), ajax(&apos;url2)]);</div><div class=\"line\">\tvar r1 = results[0];</div><div class=\"line\">\tvar r2 = results[1];</div><div class=\"line\"></div><div class=\"line\">\tvar r3 = yield ajax(r1+r2);</div><div class=\"line\">\treturn r3;</div><div class=\"line\">&#125;</div><div class=\"line\">co(foo);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>上面第一个demo, 按照迭代器的方式, 必须等r1的ajax返回结果后, 才会调用r2的ajax, 这样效率就会很低, 所以应该优化为下面那方法, 这样就可以先直接发送2个ajax请求并发, 处理结果使用迭代器</p>\n</blockquote>\n<h2 id=\"迭代器的polyfill\"><a href=\"#迭代器的polyfill\" class=\"headerlink\" title=\"迭代器的polyfill\"></a>迭代器的polyfill</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div></pre></td><td class=\"code\"><pre><div class=\"line\">function *foo(url) &#123;</div><div class=\"line\">\t// STATE *1*</div><div class=\"line\">\ttry &#123;</div><div class=\"line\">\t\tconsole.log( &quot;requesting:&quot;, url );</div><div class=\"line\">\t\tvar TMP1 = request( url );</div><div class=\"line\"></div><div class=\"line\">\t\t// STATE *2*</div><div class=\"line\">\t\tvar val = yield TMP1;</div><div class=\"line\">\t\tconsole.log( val );</div><div class=\"line\">\t&#125; catch (e) &#123;</div><div class=\"line\">\t\t// STATE *3*</div><div class=\"line\">\t\tconsole.log( &quot;Oops:&quot;, err );</div><div class=\"line\">\t\treturn false;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//polyfill 如下</div><div class=\"line\"></div><div class=\"line\">function foo(url) &#123;</div><div class=\"line\">\t// manage generator state</div><div class=\"line\">\tvar state;</div><div class=\"line\"></div><div class=\"line\">\t// generator-wide variable declarations</div><div class=\"line\">\tvar val;</div><div class=\"line\">\t</div><div class=\"line\">\tfunction process(v) &#123;</div><div class=\"line\">\t\tswitch (state) &#123;</div><div class=\"line\">\t\t\tcase 1: </div><div class=\"line\">\t\t\t\tconsole.log( &quot;requesting:&quot;, url );</div><div class=\"line\">\t\t\t\treturn request( url );  </div><div class=\"line\">\t\t\tcase 2:</div><div class=\"line\">\t\t\t\tval = v;</div><div class=\"line\">\t\t\t\tconsole.log( val );</div><div class=\"line\">\t\t\tcase 3:</div><div class=\"line\">\t\t\t\tvar err = v;</div><div class=\"line\">\t\t\t\tconsole.log( &quot;Oops:&quot;, err );</div><div class=\"line\">\t\t\t\treturn false;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\treturn &#123;</div><div class=\"line\">\t\tnext: function(v) &#123;</div><div class=\"line\">\t\t\t// initial state</div><div class=\"line\">\t\t\tif (!state) &#123; </div><div class=\"line\">\t\t\t\tstate = 1;</div><div class=\"line\">\t\t\t\treturn &#123;</div><div class=\"line\">\t\t\t\t\tdone: false,</div><div class=\"line\">\t\t\t\t\tvalue: process()</div><div class=\"line\">\t\t\t\t&#125;;</div><div class=\"line\">\t\t\t// yield resumed successfully</div><div class=\"line\">\t\t\t&#125; else if (state == 1) &#123;</div><div class=\"line\">\t\t\t\tstate = 2;</div><div class=\"line\">\t\t\t\treturn &#123;</div><div class=\"line\">\t\t\t\t\tdone: true,</div><div class=\"line\">\t\t\t\t\tvalue: process( v )</div><div class=\"line\">\t\t\t\t&#125;;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t// generator already completed</div><div class=\"line\">\t\t\telse &#123; </div><div class=\"line\">\t\t\t\treturn &#123;</div><div class=\"line\">\t\t\t\t\tdone: true,</div><div class=\"line\">\t\t\t\t\tvalue: undefined</div><div class=\"line\">\t\t\t\t&#125;;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tthrow: function(e) &#123;</div><div class=\"line\">\t\t\t// the only explicit error handling is in </div><div class=\"line\">\t\t\t// state *1*</div><div class=\"line\">\t\t\tif (state == 1) &#123;</div><div class=\"line\">\t\t\t\tstate = 3; </div><div class=\"line\">\t\t\t\treturn &#123;</div><div class=\"line\">\t\t\t\t\tdone: true,</div><div class=\"line\">\t\t\t\t\tvalue: process( e )</div><div class=\"line\">\t\t\t\t&#125;;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t// otherwise, an error won&apos;t be handled, </div><div class=\"line\">\t\t\t// so just throw it right back out</div><div class=\"line\">\t\t\telse &#123;</div><div class=\"line\">\t\t\t\tthrow e; </div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}