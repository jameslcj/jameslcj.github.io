{"tags":[{"name":"javaScript高级程序设计笔记","permalink":"http://blog.hellolc.com/tags/javaScript高级程序设计笔记/","url":"/async/tags/javaScript高级程序设计笔记.json","count":2}],"categories":[],"url":"/async/posts/2017/06/29/面向对象的程序设计.json","date":1498703108000,"path":{"year":2017,"month":6,"day":29,"name":"面向对象的程序设计"},"title":"面向对象的程序设计","permalink":"http://blog.hellolc.com/2017/06/29/面向对象的程序设计/","content":"<h2 id=\"理解对象\"><a href=\"#理解对象\" class=\"headerlink\" title=\"理解对象\"></a>理解对象</h2><blockquote>\n<p>Object.defineProperty(操作对象, 操作属性, 属性类型) IE8及以下不要使用<br>Object.defineProperties(操作对象, {}) 同事可以定义多个属性  支持IE9+<br>Object.getOwnPropertyDescriptor(操作对象, 属性)</p>\n</blockquote>\n<h3 id=\"属性类型\"><a href=\"#属性类型\" class=\"headerlink\" title=\"属性类型\"></a>属性类型</h3><ul>\n<li>[[configurable]]: 是否可以配置, 能够通过delete删除属性, 修改其属性特性(可以理解为修改属性名), 默认true</li>\n<li>[[enumerable]]: 表示能否通过for-in遍历, 默认true</li>\n<li>[[writable]]: 表示能否修改属性的值</li>\n<li>[[value]]: 属性的数据值, 默认undefined</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;&#125;</div><div class=\"line\">Object.defineProperty(obj, &quot;name&quot;, &#123;</div><div class=\"line\">  writable: false,</div><div class=\"line\">  value: &quot;hello&quot;</div><div class=\"line\">&#125;);</div><div class=\"line\">console.log(obj)//Object &#123;name: &quot;hello&quot;&#125;</div><div class=\"line\">obj.name = &apos;world&apos;</div><div class=\"line\">console.log(obj)//Object &#123;name: &quot;hello&quot;&#125;</div><div class=\"line\">// 一下就配置了writable和value, 没有配置configurable和enumerable 那么这两个值默认为false了</div><div class=\"line\">delete obj.name //false</div></pre></td></tr></table></figure>\n<h3 id=\"访问器属性\"><a href=\"#访问器属性\" class=\"headerlink\" title=\"访问器属性\"></a>访问器属性</h3><h4 id=\"getter-setter\"><a href=\"#getter-setter\" class=\"headerlink\" title=\"getter setter\"></a>getter setter</h4><ul>\n<li>[[configurable]]: 是否可以配置, 能够通过delete删除属性, 修改其属性特性(可以理解为修改属性名), 默认true</li>\n<li>[[enumerable]]: 表示能否通过for-in遍历, 默认true</li>\n<li>[[get]]: 在读取属性时调用的函数, 默认undefined</li>\n<li>[[set]]: 在写入属性时调用的函数, 默认undefined<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;_age: 20&#125;</div><div class=\"line\">//get和set方法 忽略其中一个方法, 说明那方法设置为false</div><div class=\"line\">Object.defineProperty(obj, &quot;age&quot;, &#123;</div><div class=\"line\">    get: function() &#123;</div><div class=\"line\">        return this._age;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    set: function(newVal) &#123;</div><div class=\"line\">        if (newVal &gt; 18) &#123;</div><div class=\"line\">            this._age = 18;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            this._age = newVal;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">obj.age = 55 //18</div><div class=\"line\">obj.age = 16 //16</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h2><h3 id=\"创建对象的几种方式\"><a href=\"#创建对象的几种方式\" class=\"headerlink\" title=\"创建对象的几种方式\"></a>创建对象的几种方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age) &#123;</div><div class=\"line\">  this.name = name;</div><div class=\"line\">  this.age = age;</div><div class=\"line\">  this.getName = function() &#123;</div><div class=\"line\">    return this.name;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">var p1 = new Person(&apos;p1&apos;, 18);</div><div class=\"line\">//--</div><div class=\"line\">var obj = new Object();</div><div class=\"line\">Person.call(obj, &apos;p2&apos;, 18);</div><div class=\"line\">obj.getName() //&apos;p2&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"为什么要用原型的方式实例化\"><a href=\"#为什么要用原型的方式实例化\" class=\"headerlink\" title=\"为什么要用原型的方式实例化\"></a>为什么要用原型的方式实例化</h3><blockquote>\n<p>原型继承可以共享属性和方法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">//普通的</div><div class=\"line\">function Person(name, age) &#123;</div><div class=\"line\">  this.name = name;</div><div class=\"line\">  this.age = age;</div><div class=\"line\">  //这种方式等价于 new Function(&quot;return this.name;&quot;); 当实例多个对象时, 此方法也被实例了多次, 不公用一个方法</div><div class=\"line\">  this.getName = function() &#123;</div><div class=\"line\">    return this.name;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//原型链的</div><div class=\"line\">function Person(name, age) &#123;</div><div class=\"line\">  this.name = name;</div><div class=\"line\">  this.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\">//如果使用原型链继承的方式, 就可以共用同一个方法</div><div class=\"line\">Person.prototype.getName = function() &#123;</div><div class=\"line\">  return this.name;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"获取原型的方法\"><a href=\"#获取原型的方法\" class=\"headerlink\" title=\"获取原型的方法\"></a>获取原型的方法</h3><blockquote>\n<p>构造方法.prototype === Object.getPrototypeOf(实例对象)</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person() &#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.getName = function() &#123;</div><div class=\"line\">  return this.name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ver person = new Person;</div><div class=\"line\"></div><div class=\"line\">Object.getPrototypeOf(person) === Person.prototype //true</div><div class=\"line\">//判断是否是某一对象的原型</div><div class=\"line\">Person.prototype.isPrototypeOf(person) //true</div></pre></td></tr></table></figure>\n<h3 id=\"修改原型上的属性值\"><a href=\"#修改原型上的属性值\" class=\"headerlink\" title=\"修改原型上的属性值\"></a>修改原型上的属性值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person() &#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Person.prototype.name = &apos;hello&apos;</div><div class=\"line\">var person = new Person();</div><div class=\"line\"></div><div class=\"line\">//默认使用原型上的值</div><div class=\"line\">person.name; //hello</div><div class=\"line\">person.hasOwnProperty(&apos;name&apos;);//false</div><div class=\"line\">//覆盖原型上的值</div><div class=\"line\">person.name = &apos;world&apos;;</div><div class=\"line\">person.name;// world</div><div class=\"line\">person.hasOwnProperty(&apos;name&apos;);//true</div><div class=\"line\">//删除自定义的值</div><div class=\"line\">delete person.name; //true</div><div class=\"line\">//重新指向原型上的值</div><div class=\"line\">person.name; //hello</div><div class=\"line\">person.hasOwnProperty(&apos;name&apos;);//false</div></pre></td></tr></table></figure>\n"}