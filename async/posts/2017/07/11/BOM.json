{"tags":[{"name":"javaScript高级程序设计笔记","permalink":"http://blog.hellolc.com/tags/javaScript高级程序设计笔记/","url":"/async/tags/javaScript高级程序设计笔记.json","count":17}],"categories":[],"url":"/async/posts/2017/07/11/BOM.json","date":1499740224000,"path":{"year":2017,"month":7,"day":11,"name":"BOM"},"title":"BOM","permalink":"http://blog.hellolc.com/2017/07/11/BOM/","content":"<h2 id=\"window\"><a href=\"#window\" class=\"headerlink\" title=\"window\"></a>window</h2><blockquote>\n<p>浏览器对象模型(BOM)以window对象为依托;<br>使用frames框架集合时, 每个框架都有自己的window对象以及所有原生构造函数及其他函数的副本</p>\n</blockquote>\n<h3 id=\"全局作用域\"><a href=\"#全局作用域\" class=\"headerlink\" title=\"全局作用域\"></a>全局作用域</h3><blockquote>\n<p>所有全局作用域下声明的变量和函数都会变成<code>window</code>的属性和方法</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"string\">'test'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTest</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.test);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.test);<span class=\"comment\">//\"test\"</span></span><br><span class=\"line\">getTest();<span class=\"comment\">//\"test\"</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.getTest();<span class=\"comment\">//\"test\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>全局变量与直接在<code>window</code>上定义的变量的还是有区别的;<br>直接定义在<code>window</code>上的变量可以被<code>delete</code>, 但全局变量不能;<br>根本原因是因为通过<code>var</code>声明的变量有一个名为<code>[Configurable]</code>的特性, 这个特性的值被设置为<code>false</code>, 所以无法删除;</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> test1 = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.test2 = <span class=\"string\">'world'</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(<span class=\"built_in\">window</span>, <span class=\"string\">\"test1\"</span>); <span class=\"comment\">//configurable: false</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(<span class=\"built_in\">window</span>, <span class=\"string\">\"test2\"</span>); <span class=\"comment\">//configurable: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"built_in\">window</span>.test1; <span class=\"comment\">//IE &lt; 9 直接报错, 其他返回false;</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"built_in\">window</span>.test2; <span class=\"comment\">//IE &lt; 9 直接报错, 其他返回true;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.test1);<span class=\"comment\">//\"hello\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.test2);<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果直接访问一个没有声明的变量会报错, 但是我们可以通过<code>window</code>的属性方式来访问, 避免报错</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(someVar);<span class=\"comment\">//ERROR</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.someVar);<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"窗口位置\"><a href=\"#窗口位置\" class=\"headerlink\" title=\"窗口位置\"></a>窗口位置</h3><blockquote>\n<p><code>screenLeft</code>与 <code>screenTop</code>, <code>screenX</code>与<code>screenY</code> 都是获取窗口相对于屏幕上边和左边的位置;<br>也可以使用<code>moveTo()</code>, <code>moveBy()</code>移动窗口位置, ie7以上默认是禁止的</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> leftPos = (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.screenLeft == <span class=\"string\">\"number\"</span>) ? <span class=\"built_in\">window</span>.screenLeft : <span class=\"built_in\">window</span>.screenX;</span><br><span class=\"line\"><span class=\"keyword\">var</span> topPos = (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.screenTop == <span class=\"string\">\"number\"</span>) ? <span class=\"built_in\">window</span>.screenTop : <span class=\"built_in\">window</span>.screenY;</span><br></pre></td></tr></table></figure>\n<h3 id=\"窗口大小\"><a href=\"#窗口大小\" class=\"headerlink\" title=\"窗口大小\"></a>窗口大小</h3><blockquote>\n<p>获取浏览器窗口大小, IE9+可以通过 <code>innerWidth</code>, <code>innerHeight</code>, <code>outerWidth</code>, <code>outerHeight</code>获取;<br>在chrome中, <code>innerWidth</code>, <code>innerHeight</code>与<code>outerWidth</code>, <code>outerHeight</code>值相等, 即视口(viewport)大小, 而非浏览器窗口大小;<br>所有浏览器都可以通过<code>document.documentElement.clientWidth</code>, <code>document.documentElement.clientHeight</code>获取视口大小;<br>这些属性都是必须在标准模式下才能有效; 如果在混杂模式下, 就必须通过<code>document.body.clientWidth</code>和<code>document.body.clientHeight</code>获取视口大小;<br>对于移动设备(除移动IE), <code>window.innerWidth</code>和<code>windowinnnerHeight</code>保存着可见视口, <code>document.documentElement</code>度量的是布局视口, 即渲染后页面的实际大小;<br>移动IE浏览器把布局视口信息保存在<code>document.body.clientWidth</code>和<code>document.body.clientHeight</code>中;<br>可以使用<code>resizeTo(x, y)</code>和<code>resizeBY(x, y)</code>跳转浏览器窗口大小, 但是ie7+模式是禁用的;</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pageWidth = <span class=\"built_in\">window</span>.innerWidth;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pageHeight = <span class=\"built_in\">window</span>.innerHeight;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> pageWidth != <span class=\"string\">'number'</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.compatMode == <span class=\"string\">'CSS1Compat'</span>) &#123;</span><br><span class=\"line\">    pageWidth = <span class=\"built_in\">document</span>.documentElement.clientWidth;</span><br><span class=\"line\">    pageHeight = <span class=\"built_in\">document</span>.documentElement.clientHeight;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    pageWidth = <span class=\"built_in\">document</span>.body.clientWidth;</span><br><span class=\"line\">    pageHeight = <span class=\"built_in\">document</span>.body.clientHeight;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"导航和打开窗口\"><a href=\"#导航和打开窗口\" class=\"headerlink\" title=\"导航和打开窗口\"></a>导航和打开窗口</h3><blockquote>\n<p><code>window.open()</code>有4个参数: 要加载的url地址, 窗口目标, 一个特性字符串以及一个表示新页面是否取代浏览器历史记录中当前加载页面的布尔值;<br>第二个参数可以指定为其他窗口名, 就会在指定的窗口里打开, 也可以使用特殊的窗口名称: <code>_self</code>, <code>_parent</code>, <code>_top</code>, <code>_blank</code>;<br>如果第二个参数不是一个已经存在的窗口或者框架, 并且传入第三个参数, 就会打开一个带有默认设置(工具栏, 地址栏等)的新浏览器窗口;</p>\n</blockquote>\n<ul>\n<li>第三个参数可用参数信息:<br><img src=\"https://img.alicdn.com/tfs/TB1VwkhSXXXXXXdXVXXXXXXXXXX-1056-472.png\" alt=\"第三个可用参数\"></li>\n</ul>\n<blockquote>\n<p>在ie8和chrome中, 为了能与新打开的页面保持通信, 我们获取了它的引用, 但是为了保持通信, 就不能在独立进程中运行.<br>所以如果需要独立运行, 就需要将这个引用设置为<code>null</code>, 一旦切断, 就没有办法恢复;</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newWindow = <span class=\"built_in\">window</span>.open(<span class=\"string\">\"http://www.aliyun.com\"</span>, <span class=\"string\">\"newWindow\"</span>, <span class=\"string\">\"height=400, width=400, resizable=yes\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//原始窗口可调用newWindow.close()来关闭新打开窗口</span></span><br><span class=\"line\"><span class=\"comment\">//切断通信, 使新页面独立进程运行</span></span><br><span class=\"line\">newWindow = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为了安全性, 很多浏览器屏蔽了新建打开浏览器窗口, 我们可以通过判断返回值, 来判断是否被屏蔽了; 如果是浏览器扩展或者其他程序阻止的弹出窗口,<br>那么window.open()通常会抛出一个错误; 可以用以下代码检测:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> blocked = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newWindow = <span class=\"built_in\">window</span>.open(<span class=\"string\">\"http://www.aliyun.com\"</span>, <span class=\"string\">\"_blank\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newWindow == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    blocked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  blocked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (blocked) &#123;</span><br><span class=\"line\">  alert(<span class=\"string\">\"The popup was blocked!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h2><blockquote>\n<p><code>window.location</code>和<code>document.location</code>引用的是同一个对象</p>\n</blockquote>\n<h3 id=\"location属性\"><a href=\"#location属性\" class=\"headerlink\" title=\"location属性\"></a>location属性</h3><blockquote>\n<p><a href=\"https://www.aliyun.com:80/aliware/?q=something#page=1\" target=\"_blank\" rel=\"noopener\">https://www.aliyun.com:80/aliware/?q=something#page=1</a></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>例子</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hash</td>\n<td>“#page=1”</td>\n<td>#号后面的内容</td>\n</tr>\n<tr>\n<td>host</td>\n<td>“www.aliyun.com:80”</td>\n<td>返回服务器名称和端口号(如果有)</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>“www.aliyun.com”</td>\n<td>返回服务器名称</td>\n</tr>\n<tr>\n<td>href</td>\n<td>“<a href=\"http://www.aliyun.com:80/aliware/?q=something#page=1\" target=\"_blank\" rel=\"noopener\">http://www.aliyun.com:80/aliware/?q=something#page=1</a>“</td>\n<td>返回当前加载页完整URL地址和location.toString()相等</td>\n</tr>\n<tr>\n<td>pathname</td>\n<td>“/aliware/“</td>\n<td>返回URL中的目录和文件名</td>\n</tr>\n<tr>\n<td>protocol</td>\n<td>“https:”</td>\n<td>返回URL中的目录和文件名</td>\n</tr>\n<tr>\n<td>search</td>\n<td>“?q=something”</td>\n<td>返回URL的查询字符串. 这个字符串以问号开头</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"改变地址的方式\"><a href=\"#改变地址的方式\" class=\"headerlink\" title=\"改变地址的方式\"></a>改变地址的方式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.location = <span class=\"string\">\"https://www.aliyun.com\"</span>;</span><br><span class=\"line\">location.href = <span class=\"string\">\"https://www.aliyun.com\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//上面2种方式, 最终还是调用了下面的方法</span></span><br><span class=\"line\">location.assign(<span class=\"string\">\"https://www.aliyun.com\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace\"></a>replace</h3><blockquote>\n<p>上面的方式都会生成浏览历史, 可以通过后退回到之前页面; 使用<code>location.replace(&#39;https://www.aliyun.com&#39;)</code>, 就无法回退到之前的页面</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location.replace(<span class=\"string\">'https://www.aliyun.com'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"reload重新加载页面\"><a href=\"#reload重新加载页面\" class=\"headerlink\" title=\"reload重新加载页面\"></a>reload重新加载页面</h3><blockquote>\n<p><code>reload</code>可以重新加载页面, 它接受一个布尔值参数, 如果传递为<code>true</code>, 强制从服务器重新加载, 否则有可能从缓存中加载</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location.reload();<span class=\"comment\">//重新加载(有可能从缓存中加载)</span></span><br><span class=\"line\">location.reload(<span class=\"literal\">true</span>);<span class=\"comment\">//重新加载(从服务器重新加载)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"navigator\"><a href=\"#navigator\" class=\"headerlink\" title=\"navigator\"></a>navigator</h2><h3 id=\"属性方法\"><a href=\"#属性方法\" class=\"headerlink\" title=\"属性方法\"></a>属性方法</h3><p><img src=\"https://img.alicdn.com/tfs/TB1x1ZHSXXXXXbEXpXXXXXXXXXX-676-604.png\" alt=\"navigator属性方法\"><br><img src=\"https://img.alicdn.com/tfs/TB1lQb5SXXXXXaTapXXXXXXXXXX-676-247.png\" alt=\"navigator属性方法\"></p>\n<h3 id=\"检测插件\"><a href=\"#检测插件\" class=\"headerlink\" title=\"检测插件\"></a>检测插件</h3><blockquote>\n<p>非IE浏览器, 可以使用<code>navigator.plugins</code>来检测;<br>而IE只能通过专有的<code>ActiveXObject</code>类型, 并且使用<code>COM</code>对象的方式实现插件, <code>Flash</code>的标识符是<code>ShockwaveFlash.ShockwaveFlash</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//非IE</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasPlugin</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  name = name.toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; navigator.plugins.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (navigator.plugins[i].name.toLowerCase().indexOf(name) &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//检测Flash</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hasPlugin(<span class=\"string\">\"Flash\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//IE下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasIEPlugin</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ActiveXObject(name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//检测Flash</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hasIEPlugin(<span class=\"string\">\"ShockwaveFlash.ShockwaveFlash\"</span>));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>navigator.plugins.refresh()</code> 可以刷新plugins已反映最新安装的插件;<br>这个函数接受一个布尔值, 当为true时, 会重新加载包含插件的所有页面, 否则, 只更新plugins集合, 不重新加载页面;</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.plugins.refresh(<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"注册处理程序\"><a href=\"#注册处理程序\" class=\"headerlink\" title=\"注册处理程序\"></a>注册处理程序</h3><blockquote>\n<p>html5定义了<code>navigator.registerContentHandler(要处理的MIME类型, 页面URL, 应用程序名称)</code>和<code>navigator.registerProtocolHandler(要处理的协议, 页面的URL, 应用程序名称)</code><br>这两个方法可以让一个站点知名它可以处理特定类型的信息</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.registerContentHandler(<span class=\"string\">\"application/res+xml\"</span>, <span class=\"string\">\"http://www.somereader.com?feed=%s\"</span>, <span class=\"string\">\"Some Reader\"</span>);</span><br><span class=\"line\">navigator.registerProtocolHandler(<span class=\"string\">\"mailto\"</span>, <span class=\"string\">\"http://www.somemailclient.com?cmd=%s\"</span>, <span class=\"string\">\"Some Mail Client\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"screen\"><a href=\"#screen\" class=\"headerlink\" title=\"screen\"></a>screen</h2><blockquote>\n<p>用户不大, 主要用来显示浏览器窗口外部的显示器的信息;<br>设计移动设备的屏幕大小时, 情况有点不一样, iOS设备始终返回竖着拿在手里时屏幕的大小, 而安卓设备则会调用<code>screen.width</code>和<code>screen.height</code>的值</p>\n</blockquote>\n<p><img src=\"https://img.alicdn.com/tfs/TB1tXUwSXXXXXXQXVXXXXXXXXXX-693-715.png\" alt=\"screen\"></p>\n<h2 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h2><blockquote>\n<p>记录浏览历史</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//后退一页</span></span><br><span class=\"line\">history.go(<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"comment\">//前进一页</span></span><br><span class=\"line\">history.go(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//后退一页</span></span><br><span class=\"line\">history.back();</span><br><span class=\"line\"><span class=\"comment\">//前进一页</span></span><br><span class=\"line\">history.forward(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//跳转到最近浏览的google.com页面 ps:亲测,没生效 - -</span></span><br><span class=\"line\">history.go(<span class=\"string\">\"google.com\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//可以获取有几个浏览历史页面记录</span></span><br><span class=\"line\">history.length</span><br></pre></td></tr></table></figure>\n"}