{"tags":[{"name":"javaScript高级程序设计笔记","permalink":"http://blog.hellolc.com/tags/javaScript高级程序设计笔记/","url":"/async/tags/javaScript高级程序设计笔记.json","count":15}],"categories":[],"url":"/async/posts/2017/08/09/事件.json","date":1502244770000,"path":{"year":2017,"month":8,"day":9,"name":"事件"},"title":"事件","permalink":"http://blog.hellolc.com/2017/08/09/事件/","content":"<h2 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h2><h3 id=\"DOM事件流\"><a href=\"#DOM事件流\" class=\"headerlink\" title=\"DOM事件流\"></a>DOM事件流</h3><blockquote>\n<p>DOM2级事件规定事件流包括三个阶段: 事件捕获阶段, 处于目标阶段和事件冒泡阶段. IE9+的等浏览器都支持此事件流</p>\n</blockquote>\n<h2 id=\"事件处理程序\"><a href=\"#事件处理程序\" class=\"headerlink\" title=\"事件处理程序\"></a>事件处理程序</h2><h3 id=\"DOM0级事件处理程序\"><a href=\"#DOM0级事件处理程序\" class=\"headerlink\" title=\"DOM0级事件处理程序\"></a>DOM0级事件处理程序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div = document.getElementById(&quot;div1&quot;);</div><div class=\"line\">div.onclick = function() &#123;</div><div class=\"line\">\tconsole.log(this.id);//div1</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">div.onclick = null;//删除事件</div></pre></td></tr></table></figure>\n<h3 id=\"DOM2级事件处理程序\"><a href=\"#DOM2级事件处理程序\" class=\"headerlink\" title=\"DOM2级事件处理程序\"></a>DOM2级事件处理程序</h3><ul>\n<li>addEventListener(要处理的事件名, 作为事件处理的函数, 是否捕捉);</li>\n<li>removeEventListener(要处理的事件名, 作为事件处理的函数, 是否捕捉);</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div = document.getElementById(&quot;div1&quot;); </div><div class=\"line\">var handler = function() &#123;</div><div class=\"line\">\t//do something</div><div class=\"line\">&#125;</div><div class=\"line\">div.addEventListener(&apos;click&apos;, handler, false);</div><div class=\"line\">div.removeEventListener(&apos;click&apos;, handler, false);</div></pre></td></tr></table></figure>\n<h3 id=\"IE事件处理程序\"><a href=\"#IE事件处理程序\" class=\"headerlink\" title=\"IE事件处理程序\"></a>IE事件处理程序</h3><ul>\n<li>attachEvent(事件处理名称, 事件处理函数)</li>\n<li>detachEvent(事件处理名称, 事件处理函数)</li>\n</ul>\n<blockquote>\n<p><code>attachEvent</code>绑定的事件需要添加前缀<code>on</code>, 而<code>addEventListener</code>不需要; 事件处理函数的<code>this</code>指向<code>window</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div = document.getElementById(&quot;div1&quot;); </div><div class=\"line\">var handler = function() &#123;</div><div class=\"line\">\tconsole.log(this === window); //true</div><div class=\"line\">&#125;</div><div class=\"line\">div.attachEvent(&apos;onclick&apos;, handler);</div><div class=\"line\">div.detachEvent(&apos;onclick&apos;, handler);</div></pre></td></tr></table></figure>\n<h2 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h2><h3 id=\"DOM中的事件\"><a href=\"#DOM中的事件\" class=\"headerlink\" title=\"DOM中的事件\"></a>DOM中的事件</h3><blockquote>\n<p>只有在事件处理程序执行期间, event对象才会存在, 一旦事件处理程序执行完成, event对象就会被销毁</p>\n<p>当我们将事件挂载在body上, 并点击body中的一个按钮btn, 会有如下结果;</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.body.onclick = function(event) &#123;</div><div class=\"line\">\tconsole.log(event.currentTarget === document.body);//true</div><div class=\"line\">\tconsole.log(this === document.body);//true</div><div class=\"line\">\tconsole.log(event.target === document.getElementById(&quot;btn&quot;));//true</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>preventDefault() 阻止默认事件</li>\n<li>stopPropagation() 阻止事件的捕捉和冒泡</li>\n<li>eventPhase 值为 1 是捕捉阶段, 值为2是处于目标对象上, 值为3是冒泡阶段</li>\n</ul>\n<h3 id=\"IE中的事件对象\"><a href=\"#IE中的事件对象\" class=\"headerlink\" title=\"IE中的事件对象\"></a>IE中的事件对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var btn = document.getElemntById(&apos;btn&apos;);</div><div class=\"line\">btn.onclick = function() &#123;</div><div class=\"line\">\twindow.event.type; //click</div><div class=\"line\">\twindow.event.returnValue = false;//阻止默认事件</div><div class=\"line\">\twindow.event.cancelBubble = true;//阻止冒泡事件</div><div class=\"line\">\twindow.event.scrElemnt == this;//true 事件对象</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"事件类型\"><a href=\"#事件类型\" class=\"headerlink\" title=\"事件类型\"></a>事件类型</h2><h3 id=\"UI事件\"><a href=\"#UI事件\" class=\"headerlink\" title=\"UI事件\"></a>UI事件</h3><ul>\n<li>DOMActivate: 表示元素已被用户操作(通过鼠标或键盘)激活. 这个事件被在dom3级事件废弃, 建议不使用</li>\n<li>load: 当页面完全加载后在window上面触发, 当所有框架都加载完毕时在框架集上面触发, 当图像加载完毕时在<img>元素上面触发, 或者嵌入的内容加载完毕时在<code>&lt;object&gt;</code>元素上面触发</li>\n<li>unload: 当页面卸载时在window上面触发等, 与load事件对应</li>\n<li>abort: 用户停止下载过程时, 如果嵌入的内容没有加载完毕时, 则在<code>&lt;object&gt;</code>元素上面触发</li>\n<li>error: 当发生JavaScript错误时在window上触发, 当无法加载图像时在<code>&lt;img&gt;</code>元素上面触发等</li>\n<li>select: 用户选择文本框中的字符时触发</li>\n<li>resize: 窗口大小变化时触发</li>\n<li>scroll: 滚动条滚动时触发</li>\n</ul>\n<h3 id=\"焦点事件\"><a href=\"#焦点事件\" class=\"headerlink\" title=\"焦点事件\"></a>焦点事件</h3><ul>\n<li>focus: 当元素获取焦点时触发, 这个事件不冒泡</li>\n<li>focusin: 在元素获取焦点时触发, 这个事件冒泡</li>\n<li>blur: 当元素失去焦点时触发, 这个事件不冒泡</li>\n<li>focusout: 在元素失去焦点时触发, 是html事件blur的通用版本</li>\n</ul>\n<blockquote>\n<p>当焦点从一个元素移动到另一个元素时, 会依次触发下列事件, 其中focusout blur DOMFocusOut在失去焦点元素上触发, 其他在获取焦点元素上触发</p>\n</blockquote>\n<ul>\n<li>focusout </li>\n<li>focusin</li>\n<li>blur</li>\n<li>DOMFocusOut</li>\n<li>focus</li>\n<li>DOMFocusIn</li>\n</ul>\n<h3 id=\"鼠标事件\"><a href=\"#鼠标事件\" class=\"headerlink\" title=\"鼠标事件\"></a>鼠标事件</h3><ul>\n<li>click</li>\n<li>dbclick</li>\n<li>mousedown</li>\n<li>mouseenter</li>\n<li>mouseleave</li>\n<li>mousemove</li>\n<li>mouseout</li>\n<li>mouseover</li>\n<li>mouseup</li>\n</ul>\n<blockquote>\n<p>除了 mouseenterh, mouseleave 不冒泡, 其他都冒泡; 事件间也会有关联; 只有在同一个元素上相继触发mousedown和mouseup才会触发click事件, 取消任何一个事件都不会触发click</p>\n</blockquote>\n<ol>\n<li><p>客户区坐标位置</p>\n<ul>\n<li>clientX 鼠标在客户区的水平坐标</li>\n<li>clientY 鼠标在客户区的垂直坐标</li>\n</ul>\n</li>\n<li><p>页面坐标位置</p>\n<ul>\n<li>pageX </li>\n<li>pageY</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>此两值与clientX, clientY类似, 只不过从页面本身而不是从视口的左边和定边开始计算的</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pageX = event.clietX + (docuemnt.body.scrollLeft || document.documentElement.scrollLeft);</div><div class=\"line\">pageY = event.clietY + (docuemnt.body.scrollTop || document.documentElement.scrollTop);</div></pre></td></tr></table></figure>\n<ol>\n<li><p>屏幕坐标位置</p>\n<ul>\n<li>screenX 到屏幕最左侧的坐标</li>\n<li>screenY 到屏幕最上方的坐标</li>\n</ul>\n</li>\n<li><p>相关元素</p>\n</li>\n</ol>\n<blockquote>\n<p>在嵌套的元素里绑定<code>mouseover</code>, <code>mouseout</code>等事件, 会触发多余事件, 我们可以通过判断相关元素, 来避免多余事件触发, IE9+可以使用<code>event.relatedTarget</code>属性判断, ie8及以下使用<code>event.fromElment</code>和<code>event.toElement</code>属性判断 </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var EventUtil = &#123;</div><div class=\"line\">\tgetRelatedTarget: function(event) &#123;</div><div class=\"line\">\t\tif (event.relatedTarget) &#123;</div><div class=\"line\">\t\t\treturn event.relatedTarget;</div><div class=\"line\">\t\t&#125; else if (event.toElement) &#123;</div><div class=\"line\">\t\t\treturn event.toElement;</div><div class=\"line\">\t\t&#125; else if (event.fromElement) &#123;</div><div class=\"line\">\t\t\treturn event.fromElement;</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\treturn null;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>鼠标按钮</li>\n</ol>\n<blockquote>\n<p>当发生<code>mousedown</code>或<code>mouseup</code>事件时, 可以根据<code>event.button</code>来判断按下的是鼠标的哪个键; firefox支持一个<code>DOMMourseScroll</code>事件, 会冒泡到<code>window</code>上</p>\n</blockquote>\n<ol>\n<li>鼠标滚轮事件</li>\n</ol>\n<blockquote>\n<p>滚轮事件<code>mousewheel</code>都会冒泡到<code>document</code>或<code>window</code>上</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(document).on(&quot;mousewheel&quot;, function(e) &#123;console.log(e.detail)&#125;)</div><div class=\"line\">//firefox</div><div class=\"line\">$(window).on(&quot;DOMMouseScroll&quot;, function(e) &#123;console.log(&quot;detail:&quot;, e.detail)&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"键盘与文本事件\"><a href=\"#键盘与文本事件\" class=\"headerlink\" title=\"键盘与文本事件\"></a>键盘与文本事件</h3><ul>\n<li>keydown 任意键都会触发</li>\n<li>keypress 只要字符才会触发</li>\n<li><p>keyup 当用户释放按键时才触发</p>\n</li>\n<li><p>获取字符编码</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var eventUtil = &#123;</div><div class=\"line\">\tgetCharCode: function(event) &#123;</div><div class=\"line\">\t\tif (typeof event.charCode == &quot;number&quot;) &#123;</div><div class=\"line\">\t\t\treturn event.charCode;</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\treturn event.keyCode;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>getModifierState(“Shift/Control/AltGraph/Meta”) 检测是否被按下</li>\n<li>textInput事件</li>\n</ul>\n<blockquote>\n<p>只会在可编辑区域触发事件, 与keypress也有区别, keypress在按下影响文本显示时也会触发(比如退格键)</p>\n</blockquote>\n<ul>\n<li>event.inputmethod 表示把文本输入到文本框中的方式, 比如黏贴复制, 拖放, 手写等</li>\n</ul>\n<h3 id=\"复合事件\"><a href=\"#复合事件\" class=\"headerlink\" title=\"复合事件\"></a>复合事件</h3><blockquote>\n<p>可以让用户输入键盘上没有的字符</p>\n</blockquote>\n<ul>\n<li>compositionstart</li>\n<li>compositionupdate</li>\n<li>compositionend</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//判断是否支持复合事件</div><div class=\"line\">document.implementation.hasFeature(&quot;CompositionEvent&quot;, &quot;3.0&quot;)</div></pre></td></tr></table></figure>\n<h3 id=\"变动事件\"><a href=\"#变动事件\" class=\"headerlink\" title=\"变动事件\"></a>变动事件</h3><ul>\n<li>DOMSubtreeModified DOM结构发生任何变化时触发</li>\n<li>DOMNodeInserted</li>\n<li>DOMNodeRemoved</li>\n<li>DOMNodeInsertedIntoDocument 在DOMNodeInserted后触发</li>\n<li>DOMNodeRemovedFromDocument 在DOMNodeRemoved后触发</li>\n<li>DOMAttrModified </li>\n<li>DOMCharacterDataModified 值变化触发</li>\n</ul>\n<h3 id=\"HTML5事件\"><a href=\"#HTML5事件\" class=\"headerlink\" title=\"HTML5事件\"></a>HTML5事件</h3><ol>\n<li>contextmenu 鼠标右击调出上下文事件, 通常可以用来替换右击显示样式</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div = document.getElementById(&quot;div&quot;);</div><div class=\"line\">div.oncontextmenu = function(e) &#123;</div><div class=\"line\">\te.preventDefault();</div><div class=\"line\">\t//阻止默认显示, 显示自定样式</div><div class=\"line\">\tvar menu = document.getElementById(&quot;menu&quot;);</div><div class=\"line\">\tmenu.style.left = e.clientX + &apos;px&apos;;</div><div class=\"line\">\tmenu.style.top = e.clientY + &apos;px&apos;;</div><div class=\"line\">\tmenu.style.visibility = &apos;visible&apos;;</div><div class=\"line\">&#125;</div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">2. beforeunload 关闭页面前提示是否关闭</div><div class=\"line\">3. DOMContentLoaded </div><div class=\"line\"></div><div class=\"line\">&gt; 这个方法与load的事件的区别是: load会等待js, 图片加载完毕, 而这个事件发生在形成完整的DOM树后触发;</div><div class=\"line\">对于IE9以前的浏览器不支持此事件, 通过setTimeout(function() &#123;&#125;, 0)实现, 并且作为页面中第一个超时顶用.</div><div class=\"line\"></div><div class=\"line\">4. readystatechange事件</div><div class=\"line\"> - uninitialized(未初始化) 对象未初始化 </div><div class=\"line\"> - loading(正在加载) 对象正在加载数据</div><div class=\"line\"> - loaded 对象加载数据完毕</div><div class=\"line\"> - interactive (交互) 可以操作对象了, 但还没有完全加载 (DOMContentLoaded事件也几乎同时发送在此时)</div><div class=\"line\"> - complete(完成) 对象已经加载完成</div><div class=\"line\"></div><div class=\"line\">&gt; 不是没有对象的加载, 都会有以上阶段, 有些对象会跳过某些阶段</div></pre></td></tr></table></figure>\n<p>document.onreadystatechange = function(event) {<br>    if (document.readyState == ‘interactive’ || document.readyState == ‘complete’) {<br>        consolelog(‘content loaded’)<br>    }<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">5. pageshow和pagehide</div><div class=\"line\"></div><div class=\"line\"> - pageshow 页面显示时触发, 不管是否来自缓存, 会在load事件后触发; 可以通过event.persisted来判断, true为来自缓存</div><div class=\"line\"> - pagehide 在页面卸载时触发, 在unload事件前触发</div></pre></td></tr></table></figure></p>\n<p>window.onpageshow = function(e) {console.log(e.persisted)}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">6. hashchange事件</div></pre></td></tr></table></figure></p>\n<p>window.onhashchange = function(event) {<br>    console.log(event.oldURL, event.newURL)<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### 设备事件</div><div class=\"line\">1. orientationchange 事件, ios设备屏幕旋转时会触发</div><div class=\"line\"> - window.orientation值为0, 表示刚好垂直</div><div class=\"line\"> - window.orientation值为90, 表示头朝正左边</div><div class=\"line\"> - window.orientation值为-90, 表示头朝正右边</div></pre></td></tr></table></figure></p>\n<p>window.orientationchange = function(event) {<br>    console.log(window.orientation)<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">2. MozOrientation 事件 安卓 设备支持</div></pre></td></tr></table></figure></p>\n<p>window.MozOrientation = function(event) {<br>    consoe.log(event.x, event.y, event.y)<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">3. deviceorientation 事件 与MozOrientation类似  兼容性也是最好的</div><div class=\"line\"> - alpha: z轴 0 - 360度</div><div class=\"line\"> - beta: x轴 -180 - 180度</div><div class=\"line\"> - gamma: y轴 -90 - 90度</div><div class=\"line\"> - absolute 布尔值, 表示设备是否返回一个绝对值</div><div class=\"line\"> - compassCalibrated 布尔值, 表示指南针是否校准过</div><div class=\"line\"></div><div class=\"line\">4. devicemotion 事件 可以检测手机是否在往下掉, 是否被拿在手里</div><div class=\"line\"> - acceleration: 一个包含x, y, z的对象, 在不考虑重力的情况下, 告诉你在每个方向上的加速度</div><div class=\"line\"> - accelerationIncludeingGravity: 一个包含x, y, z的对象, 在考虑重力的情况下, 告诉你在每个方向上的加速度</div><div class=\"line\"> - interval 以毫秒表示的时间值</div><div class=\"line\"> - rotationRate: 包含alpha, beta, gamma的对象</div><div class=\"line\"></div><div class=\"line\">### 触摸与手势事件</div><div class=\"line\">1. 触摸事件</div><div class=\"line\"> - touchstart</div><div class=\"line\"> - touchmove</div><div class=\"line\"> - touchend</div><div class=\"line\"> - touchcanel</div><div class=\"line\"></div><div class=\"line\">2. 手势事件</div><div class=\"line\"> - gesturestart 当一个手指已经按在屏幕上时, 而另一个手指又触摸屏幕时触发</div><div class=\"line\"> - gesturechange 当触摸屏幕任何一个手指位置变化时触发</div><div class=\"line\"> - gestureend 当任何一个手指从屏幕上移开时触发</div><div class=\"line\"></div><div class=\"line\">&gt; 只有两个手指都触摸到屏幕上才触发这些事件</div><div class=\"line\"></div><div class=\"line\">## 内存和性能</div><div class=\"line\">### 事件委托</div><div class=\"line\">&gt; 当对一个元素的子元素绑定了很多事件的时候, 可以对其父元素利用事件委托的机制绑定, 利用`event.target`判断是哪个子元素, 响应对应的事件, 可以提升性能</div><div class=\"line\"></div><div class=\"line\">### 移除事件处理程序</div><div class=\"line\">&gt; 在ie8以前的浏览器, 当一个元素绑定了事件, 然后这个元素被删除后, 因为还和事件处于引用关系, 因此还在内存中无法释放, 所以应该先取消引用关系, 再删除;</div><div class=\"line\">或是把事件委托给父类</div></pre></td></tr></table></figure></p>\n<p><div div=\"div\"><br>    <button id=\"btn\">按钮</button><br></div><br>var btn = document.getElementById(“btn”);<br>btn.onclick = function(event) {<br>    var div = document.getElementById(“div”);<br>    div.innerHTML = ‘clicked’<br>}</p>\n<p>//优化如下<br>btn.onclick = function(event) {<br>    var div = document.getElementById(“div”);<br>    //取消引用关系<br>    btn.onclick = null;<br>    div.innerHTML = ‘clicked’<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">## 模拟事件</div><div class=\"line\">### DOM中的事件模拟</div><div class=\"line\">- createEvent(参数)</div><div class=\"line\"> + UIEvents 鼠标键盘事件</div><div class=\"line\"> + MouseEvents 一般化的鼠标事件</div><div class=\"line\"> + MutationEvents 一般化的DOM变动</div><div class=\"line\"> + HTMLEvents 一般化的HTML事件</div><div class=\"line\"></div><div class=\"line\">- dispatchEvent(事件对象) 触发事件</div><div class=\"line\"></div><div class=\"line\">1. 鼠标事件</div><div class=\"line\">&gt; createEvent(&quot;MouseEvents&quot;), 返回对象有个initMouseEvent()方法, 该方法接受如下15个参数</div><div class=\"line\"></div><div class=\"line\">![鼠标事件参数](https://img.alicdn.com/tfs/TB1KMGzSVXXXXcBXFXXXXXXXXXX-1992-1222.png)</div></pre></td></tr></table></figure>\n<p>var btn = document.getElementById(“myBtn”);<br>var event = document.createEvent(“MouseEvents”);<br>event.返回对象有个initMouseEvent(“click”, true)<br>event.initMouseEvent(“click”, true, true, document.defaultView, 0, 0, 0, 0, 0, false, false, false, false, 0, null)<br>btn.dispatchEvent(event)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">2. 键盘事件</div><div class=\"line\">- createEvent(&quot;keyboardEvent&quot;), 返回对象包含一个initKeyEvent()方法, 可接受如下参数</div><div class=\"line\">![鼠标事件参数](https://img.alicdn.com/tfs/TB1UHB_SVXXXXaIapXXXXXXXXXX-2090-788.png)</div><div class=\"line\"></div><div class=\"line\">3. 模拟其他事件</div><div class=\"line\">&gt; createEvent(&quot;MutationEvents&quot;), 返回对象有个initMutationEvent()方法, 可接受参数, type, bubbles, cancelable, relatedNode, preValue, newValue, attrName, attrChange</div><div class=\"line\"></div><div class=\"line\">&gt; createEvent(&quot;HTMLEvents&quot;), 返回对象有个initEvent()方法</div></pre></td></tr></table></figure></p>\n<p> var event = docuemnt.createEvent(‘HTMLEvents’);<br> event.initEvent(“focus”, true, true);<br> target.dispatchEvent(event);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">4. 自定义事件</div><div class=\"line\">&gt; createEvent(&quot;CustomEvent&quot;), 返回对象有个initCustomEvent()方法, 接受4个参数, type, bubbles, cancelable, detail(对象, 保存在event对象的detail属性中)</div></pre></td></tr></table></figure></p>\n<p>event = docuemnt.createEvent(‘CustomEvent’);<br>event.initCustomEvent(“myevent”, true, true, false, “hello world”);<br>target.dispatchEvent(event);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">### IE中的事件模拟</div></pre></td></tr></table></figure></p>\n<p>var mtBtn = document.getElementById(“myBtn”)<br>var event = document.createEventObject();<br>event.screenX = 100;<br>event.screenY = 0;<br>event.clientX = 0;<br>event.clientY = 0;<br>event.ctrlKey = false;<br>event.altKey = false;<br>event.shiftKey = false;<br>event.button = 0;</p>\n<p>myBtn.fireEvent(“onclick”, event);<br>```</p>\n"}