{"tags":[{"name":"javaScript高级程序设计笔记","permalink":"http://blog.hellolc.com/tags/javaScript高级程序设计笔记/","url":"/async/tags/javaScript高级程序设计笔记.json","count":17}],"categories":[],"url":"/async/posts/2017/08/02/DOM扩展.json","date":1501638833000,"path":{"year":2017,"month":8,"day":2,"name":"DOM扩展"},"title":"DOM扩展","permalink":"http://blog.hellolc.com/2017/08/02/DOM扩展/","content":"<h2 id=\"选择符API\"><a href=\"#选择符API\" class=\"headerlink\" title=\"选择符API\"></a>选择符API</h2><h3 id=\"querySelector-方法\"><a href=\"#querySelector-方法\" class=\"headerlink\" title=\"querySelector()方法\"></a>querySelector()方法</h3><blockquote>\n<p>可以接受一个css选择符, 返回匹配的第一个元素, 如果没有找到匹配的元素, 返回null</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取body</span><br><span class=\"line\">document.querySelector(&quot;body&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">//获取id为div的元素</span><br><span class=\"line\">document.querySelector(&quot;#div&quot;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"querySelectorAll-方法\"><a href=\"#querySelectorAll-方法\" class=\"headerlink\" title=\"querySelectorAll()方法\"></a>querySelectorAll()方法</h3><blockquote>\n<p>可以接受一个css选择符, 返回所有匹配的第一个元素, 如果没有找到匹配的元素, 返回null</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取所有类为myClass的元素</span><br><span class=\"line\">document.querySelectorAll(&quot;.myClass&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">//获取所有div下的所有p元素</span><br><span class=\"line\">document.querySelectorAll(&quot;div p&quot;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"matchesSelector-方法\"><a href=\"#matchesSelector-方法\" class=\"headerlink\" title=\"matchesSelector()方法\"></a>matchesSelector()方法</h3><blockquote>\n<p>选择的元素是否与之匹配, 匹配返回true, 否则返回false; 目前不是所有浏览器支持, 需要添加浏览器标识</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (document.body.matchesSelector &amp;&amp; document.body.matchesSelector(&quot;body&quot;)) &#123;</span><br><span class=\"line\">\t//do someting</span><br><span class=\"line\">&#125; else if (document.body.webkitMatchesSelector &amp;&amp; document.body.webkitMatchesSelector(&quot;body&quot;)) &#123;</span><br><span class=\"line\">\t//do someting</span><br><span class=\"line\">&#125; else if (document.body.msMatchesSelector &amp;&amp; document.body.msMatchesSelector(&quot;body&quot;)) &#123;</span><br><span class=\"line\">\t//do someting</span><br><span class=\"line\">&#125; else if (document.body.mozMatchesSelector &amp;&amp; document.body.mozMatchesSelector(&quot;body&quot;)) &#123;</span><br><span class=\"line\">\t//do someting</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"元素遍历\"><a href=\"#元素遍历\" class=\"headerlink\" title=\"元素遍历\"></a>元素遍历</h2><blockquote>\n<p>因为ie9以前是版本, 对于元素间的空格, 不会作为节点返回, 因此childNodes和firstChild等元素在不同浏览器下结果不一样, 所以w3c又引入了新的属性来获取元素</p>\n</blockquote>\n<ul>\n<li>childElementCount 返回子元素个数(不包含空格和注释)</li>\n<li>firstElementChild 返回第一个子元素</li>\n<li>lastElementChild 返回最后一个子元素</li>\n<li>previousElementSibling 返回前一个同辈元素</li>\n<li>nextElementSibling 返回后一个同辈元素</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//之前的做法</span><br><span class=\"line\">var child = element.firstChild;</span><br><span class=\"line\">while (child != element.lastChild) &#123;</span><br><span class=\"line\">\tif (child.nodeType == 1) &#123;</span><br><span class=\"line\">\t\tprocessChild(child)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tchild = child.nextSibling;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//现在用新的属性, 可简化如下</span><br><span class=\"line\">var child = element.firstElementChild;</span><br><span class=\"line\">while (child != element.lastElementChild) &#123;</span><br><span class=\"line\">\tprocessChild(child)</span><br><span class=\"line\">\tchild = child.nextElementSibling;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"HTML5\"><a href=\"#HTML5\" class=\"headerlink\" title=\"HTML5\"></a>HTML5</h2><h3 id=\"与类相关的扩充\"><a href=\"#与类相关的扩充\" class=\"headerlink\" title=\"与类相关的扩充\"></a>与类相关的扩充</h3><ul>\n<li>getElementsByClass()方法<ul>\n<li>类名选择器</li>\n<li>返回nodeList, 所以和其他返回nodeList的选择器一样有性能问题</li>\n<li>IE9+支持</li>\n</ul>\n</li>\n<li>classList属性<ul>\n<li>add(类名) 添加类名</li>\n<li>remove(类名) 删除类名</li>\n<li>contains(类名) 判断是否包含类名</li>\n<li>toggle(类名) 有对应类名就删除, 没有就添加</li>\n<li>Firefox3.6+和chrome</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"焦点管理\"><a href=\"#焦点管理\" class=\"headerlink\" title=\"焦点管理\"></a>焦点管理</h3><ul>\n<li>document.activeElement 获取文档焦点对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var btn = document.getElementById(&quot;btn&quot;);</span><br><span class=\"line\">btn.focus();</span><br><span class=\"line\">btn === document.activeElement; //true</span><br></pre></td></tr></table></figure>\n<ul>\n<li>document.hasFocus() 判断文档是否获取焦点对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var btn = document.getElementById(&quot;btn&quot;);</span><br><span class=\"line\">btn.focus();</span><br><span class=\"line\">document.hasFocus(); //true</span><br></pre></td></tr></table></figure>\n<h3 id=\"HTMLDocument的扩展\"><a href=\"#HTMLDocument的扩展\" class=\"headerlink\" title=\"HTMLDocument的扩展\"></a>HTMLDocument的扩展</h3><ul>\n<li>readyState 属性 判断文档是否加载完毕<ul>\n<li>其值为loading, 正在加载文档</li>\n<li>其值为complete, 已经加载完文档</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (document.readyState == &apos;complete&apos;) &#123;</span><br><span class=\"line\">\t//do something</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>compatMode 渲染模式</p>\n<ul>\n<li>CSS1Compat 标准模式</li>\n<li>BackCompat 兼容模式</li>\n</ul>\n</li>\n<li><p>head 属性 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var head  = document.head || document.getElementsByTagName(&quot;head&quot;)[0]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"字符集属性\"><a href=\"#字符集属性\" class=\"headerlink\" title=\"字符集属性\"></a>字符集属性</h3><ul>\n<li>document.charset 当前浏览器字符集</li>\n<li>document.defaultCharset 浏览器或系统默认字符</li>\n</ul>\n<h3 id=\"自定义数据属性\"><a href=\"#自定义数据属性\" class=\"headerlink\" title=\"自定义数据属性\"></a>自定义数据属性</h3><ul>\n<li>dataset</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div data-id=&quot;123&quot; data-name=&quot;hello&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">var div = document.getElementsByTagName(&quot;div&quot;)[0];</span><br><span class=\"line\">div.dataset.id = &quot;321&quot;;</span><br><span class=\"line\">div.dataset.name; //&quot;hello&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入标记\"><a href=\"#插入标记\" class=\"headerlink\" title=\"插入标记\"></a>插入标记</h3><ul>\n<li>innerHTML 属性</li>\n<li>outerHTML 属性</li>\n<li>insertAdjacentHTML() 方法, 接受2个参数, 第一个参数要插入的位置, 第二个参数要插入的html文本<br>第一个参数为下:<ul>\n<li>“beforebegin” 在当前元素之前插入一个紧邻的同辈元素</li>\n<li>“afterbegin” 在当前元素之后插入一个新的子元素或在第一个子元素之前再插入新的子元素</li>\n<li>“beforeend” 在当前元素之后插入一个新的子元素或在最后一个子元素之后再插入新的子元素</li>\n<li>“afterend” 在当前元素之后插入一个紧邻的同辈元素</li>\n</ul>\n</li>\n<li>内存与性能问题</li>\n</ul>\n<blockquote>\n<p>以上方法有可能导致内存泄露, 因为替换了dom节点后, 之前的dom节点还会在内存中, 因此如果多次替换节点时, 应该先删除要被替换的节点;<br>当插入大量html标签时, 建议先拼接好html, 再进行innerHTML或者outerHTML属性, 不要频繁使用, 效率较低</p>\n</blockquote>\n<h3 id=\"scrollIntoView-方法\"><a href=\"#scrollIntoView-方法\" class=\"headerlink\" title=\"scrollIntoView() 方法\"></a>scrollIntoView() 方法</h3><blockquote>\n<p>可以让元素的位置与视口对其, 如果传入true或者不传, 则让元素的顶部与视口对其, 如果传入false, 则尽可能让元素全部出现在视口中</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementsByClassName(&quot;cr-content &quot;)[2].scrollIntoView()</span><br><span class=\"line\">document.getElementsByClassName(&quot;cr-content &quot;)[2].scrollIntoView(true);</span><br><span class=\"line\"></span><br><span class=\"line\">document.getElementsByClassName(&quot;cr-content &quot;)[2].scrollIntoView(false)</span><br></pre></td></tr></table></figure>\n<h2 id=\"专有扩展\"><a href=\"#专有扩展\" class=\"headerlink\" title=\"专有扩展\"></a>专有扩展</h2><h3 id=\"文档模式\"><a href=\"#文档模式\" class=\"headerlink\" title=\"文档模式\"></a>文档模式</h3><blockquote>\n<p>浏览器有很多种渲染模式, 为了强制浏览器以某种模式渲染页面, 可以通过一下方式设置</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=IEVersion&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"contains\"><a href=\"#contains\" class=\"headerlink\" title=\"contains\"></a>contains</h3><blockquote>\n<p>判断是否包含子节点元素</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.documentElement.contains(document.head)//true</span><br></pre></td></tr></table></figure>\n<h3 id=\"compareDocumentPosition\"><a href=\"#compareDocumentPosition\" class=\"headerlink\" title=\"compareDocumentPosition\"></a>compareDocumentPosition</h3><blockquote>\n<p>是一个DOM3级的方法, 来判断节点元素与当前元素的相对位置, 功能和contains类似;<br>其返回值为数字, 1 表示无关, 2表示居前, 4表示居后, 8表示包含, 16表示被包含</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 如下返回20, 是因为document.head被包含, 并且居后, 所以加上4, 就是20</span><br><span class=\"line\">document.documentElement.compareDocumentPosition(document.head);//20</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入文本\"><a href=\"#插入文本\" class=\"headerlink\" title=\"插入文本\"></a>插入文本</h3><ul>\n<li>innerText 删除元素节点, 返回文档节点, 或是对文本节点的替换; 如果有元素节点进行替换, 都会被转译掉, 所以为了安全, 在添加文本节点时, 应该使用innerText, 而不是innerHTML</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getInnerText(element) &#123;</span><br><span class=\"line\">\treturn (typeof element.textContent == &apos;string&apos;) ? element.textContent : element.innerText;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function setInnerText(element, text) &#123;</span><br><span class=\"line\">\tif (typeof element.textContent == &apos;string&apos;) &#123;</span><br><span class=\"line\">\t\telement.textContent = text;</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\telement.innerText = text;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>outerText<blockquote>\n<p>读取功能和<code>innerText</code>类似, 但是写的时候, 会替换掉原来的整个元素(包括子节点), 因此不建议使用</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"滚动\"><a href=\"#滚动\" class=\"headerlink\" title=\"滚动\"></a>滚动</h3><ul>\n<li>scrollIntoView() 这个前面说过</li>\n<li>scrollIntoViewIfNeeded() 功能和scrollIntoView类似, 但只在指定的元素不在可视区时才生效</li>\n<li>scrollByLines(lineCount) 将元素内容滚动指定的行高, lineCount可正可负</li>\n<li>scrollByPages(pageCount) 将元素内容滚到到指定的页面高度</li>\n</ul>\n<blockquote>\n<p>以上就scrollIntoView所有浏览器都已支持, 其他都只有部分浏览器支持</p>\n</blockquote>\n"}