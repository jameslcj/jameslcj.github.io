{"tags":[{"name":"javaScript高级程序设计笔记","permalink":"http://blog.hellolc.com/tags/javaScript高级程序设计笔记/","url":"/async/tags/javaScript高级程序设计笔记.json","count":17}],"categories":[],"url":"/async/posts/2017/08/21/canvas绘图.json","date":1503279705000,"path":{"year":2017,"month":8,"day":21,"name":"canvas绘图"},"title":"canvas基本用法","permalink":"http://blog.hellolc.com/2017/08/21/canvas绘图/","content":"<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;canvas id=&quot;drawing&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt;</div><div class=\"line\"></div><div class=\"line\">var drawing = document.getElementById(&quot;drawing&quot;);</div><div class=\"line\">if (drawing.getContext) &#123;</div><div class=\"line\">\tvar ctx = drawing.getContext(&quot;2d&quot;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>toDataUrl(MIME类型格式) 可以将canvas导出为图片</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var drawing = document.getElementById(&quot;drawing&quot;);</div><div class=\"line\">if (drawing.getContext) &#123;</div><div class=\"line\">\tvar imgUrl = drawing.toDataUrl(&quot;image/png&quot;);</div><div class=\"line\">\tvar image = document.createElment(&quot;img&quot;);</div><div class=\"line\">\timage.src = imgUrl;</div><div class=\"line\">\tdocument.body.appendChild(image);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"2D上下文\"><a href=\"#2D上下文\" class=\"headerlink\" title=\"2D上下文\"></a>2D上下文</h2><h3 id=\"填充和描边\"><a href=\"#填充和描边\" class=\"headerlink\" title=\"填充和描边\"></a>填充和描边</h3><ul>\n<li>strokeStyle 描边颜色</li>\n<li>fillStyle 填充颜色</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var drawing = document.getElementById(&quot;drawing&quot;);</div><div class=\"line\">if (drawing.getContext) &#123;</div><div class=\"line\">\tvar ctx = drawing.getContext(&quot;2d&quot;);</div><div class=\"line\">\tctx.strokeStyle = &apos;red&apos;;</div><div class=\"line\">\tctx.fillStyle = &apos;#ccc&apos;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"绘制矩形\"><a href=\"#绘制矩形\" class=\"headerlink\" title=\"绘制矩形\"></a>绘制矩形</h3><blockquote>\n<p>fillRect(), strokeRect(), clearRect() 都支持4个参数, 矩形的x坐标, 矩形y坐标, 矩形的宽度, 矩形的高度</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var drawing = document.getElementById(&quot;drawing&quot;);</div><div class=\"line\">if (drawing.getContext) &#123;</div><div class=\"line\">\tvar ctx = drawing.getContext(&quot;2d&quot;);</div><div class=\"line\">\t//先指定描边颜色</div><div class=\"line\">\tctx.strokeStyle = &apos;red&apos;;</div><div class=\"line\">\t//再执行描边区域</div><div class=\"line\">\tctx.strokeRect(10, 10, 50, 50);</div><div class=\"line\"></div><div class=\"line\">\t//先指定填充颜色</div><div class=\"line\">\tctx.fillStyle = &apos;#ccc&apos;;</div><div class=\"line\">\t//在执行填充区域</div><div class=\"line\">\tctx.fillRect(100, 100, 50, 50);</div><div class=\"line\"></div><div class=\"line\">\t//清楚画布</div><div class=\"line\">\tctx.clearRect(10, 10, 150, 150);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"绘制路径\"><a href=\"#绘制路径\" class=\"headerlink\" title=\"绘制路径\"></a>绘制路径</h3><blockquote>\n<p>必须先调用<code>beginPath()</code>方法, 表示要开始绘制新路径</p>\n</blockquote>\n<ul>\n<li>arc(x, y, radius, 开始弧度, 结束弧度, 是否逆时针) 以(x, y)为中心绘制弧线</li>\n<li>arcTo(x1, y2, x2, y2, radius) 从上一个点开始绘制一条弧线, 到(x2, y2)为止, 并且以给定的半径radius穿过(x1, y1)</li>\n<li>bezierCurveTo(c1x, c1y, c2x, c2y, x, y); 从上一个点开始绘制一条比萨尔曲线到(x, y), 并且趋向于(c1x, c1y)和(c2x, c2y)</li>\n<li>lineTo(x, y) 从上一点到(x, y)绘制一条直线</li>\n<li>moveTo(x, y) 将绘制游标移动到(x, y) 不画线</li>\n<li>quadraticCurveTo(cx, cy, x, y) 从上一点开始绘制一条二次曲线, 到(x, y)为止, 并以(cx, cy) 为控制点</li>\n<li>rect(x, y, width, height) 绘制一个矩形路径, 与fillRect和strokeRect有区别, 这两者是独立的图形</li>\n<li>isPointInPath(x, y) 在路径被关闭前可以用此方法来判断点是否在路径上</li>\n</ul>\n<blockquote>\n<p>绘制好路径后, 如果想绘制一条链接到路径起点的线条, 可以调用 <code>closePath()</code>; 如果想填充路径, 可以调用<code>fill()</code>方法, 可以调用<code>stroke()</code>方法描边, 最后可以调用<code>clip()</code>, 这个方法可以在路径上创建一个剪切区域</p>\n</blockquote>\n<h3 id=\"绘制文本\"><a href=\"#绘制文本\" class=\"headerlink\" title=\"绘制文本\"></a>绘制文本</h3><ul>\n<li>fillText(要绘制的文本字符串, x坐标, y坐标, 最大像素宽度)</li>\n<li>strokeText(要绘制的文本字符串, x坐标, y坐标, 最大像素宽度)</li>\n<li>font</li>\n<li>textAlign</li>\n<li>textBaseline 文本基线</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctx.font = &apos;bold 14px Arial&apos;;</div><div class=\"line\">ctx.textAlign = &apos;center&apos;;</div><div class=\"line\">ctx.textBaseline = &apos;middle&apos;;</div><div class=\"line\">ctx.fillText(&quot;xx&quot;, 100, 20);</div></pre></td></tr></table></figure>\n<h3 id=\"变化\"><a href=\"#变化\" class=\"headerlink\" title=\"变化\"></a>变化</h3><ul>\n<li>rotate(angle) 围绕原点逆时针旋转图像angle弧度</li>\n<li>scale(scaleX, scaleY) 缩放图像</li>\n<li>translate(x, y) 将坐标原点移动到(x, y); 执行变化后, 坐标(0, 0)会变成之前由(x, y)表示的点</li>\n<li>transform(m1_1, m1_2, m2_1, m2_2, dx, dy) 直接修改变化矩阵, 方式乘以如下矩阵<br>m1_1 m1_2 dx<br>m2_1 m2_2 dy<br>0    0    1</li>\n<li>setTransform(m1_1, m1_2, m2_1, m2_2, dx, dy) 将变化矩阵重置为默认状态, 然后再调用transform()</li>\n</ul>\n<blockquote>\n<p>fillStyle strokeStyle等属性, 如果不被修改, 在上下文中一直有效; 如果修改后, 想恢复刚才的上下文, 我们可以在修改前, 只有<code>save</code>方法把刚才的上下文推到<code>save</code>堆栈里, 需要恢复的时候再调用<code>restore</code>弹栈恢复</p>\n</blockquote>\n<ul>\n<li>save() </li>\n<li>restore()</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.body.innerHTML = `&lt;canvas id=&quot;canvas&quot; widht=&quot;500&quot; height=&quot;500&quot; &gt;&lt;/canvas&gt;`</div><div class=\"line\">var canvas = document.getElementById(&quot;canvas&quot;);</div><div class=\"line\">var ctx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">ctx.fillStyle = &apos;#ff0000&apos;</div><div class=\"line\">ctx.save();</div><div class=\"line\">ctx.fillStyle = &apos;#00ff00&apos;;</div><div class=\"line\">ctx.translate(100, 100);</div><div class=\"line\">ctx.save();</div><div class=\"line\">ctx.fillStyle = &apos;#0000ff&apos;;</div><div class=\"line\">ctx.fillRect(0, 0, 100, 200);</div><div class=\"line\">ctx.restore();</div><div class=\"line\">ctx.fillRect(10, 10, 100, 200);</div><div class=\"line\">ctx.restore();</div></pre></td></tr></table></figure>\n<h3 id=\"绘制图像\"><a href=\"#绘制图像\" class=\"headerlink\" title=\"绘制图像\"></a>绘制图像</h3><ul>\n<li>drwaImage(图片资源, 起点x, 起点y, [绘制宽度, 绘制高度, …]) 总共可传9个参数, 可以控制截取源目标图片大小和区域, 在指定位置, 展现指定大小</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var image = document.images[0];</div><div class=\"line\">ctx.drwaImage(image, 10, 10)</div></pre></td></tr></table></figure>\n<h3 id=\"阴影\"><a href=\"#阴影\" class=\"headerlink\" title=\"阴影\"></a>阴影</h3><ul>\n<li>shadowColor</li>\n<li>shadowOffsetX</li>\n<li>shadowOffsetY</li>\n<li>shadowBlur</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.body.innerHTML = `&lt;canvas id=&quot;canvas&quot; widht=&quot;500&quot; height=&quot;500&quot; &gt;&lt;/canvas&gt;`</div><div class=\"line\">var canvas = document.getElementById(&quot;canvas&quot;);</div><div class=\"line\">var ctx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">ctx.shadowColor = &apos;#ccc&apos;;</div><div class=\"line\">ctx.shadowOffsetX = 5;</div><div class=\"line\">ctx.shadowOffsetY = 5;</div><div class=\"line\">ctx.shadowBlur = 4;</div><div class=\"line\">ctx.fillStyle = &apos;#ff0000&apos;;</div><div class=\"line\">ctx.fillRect(10, 10, 50, 50)</div></pre></td></tr></table></figure>\n<h3 id=\"渐变\"><a href=\"#渐变\" class=\"headerlink\" title=\"渐变\"></a>渐变</h3><ul>\n<li>createLinearGradient(起点x, 起点y, 终点x, 终点y)</li>\n<li>addColorStop([0-1], 颜色)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.body.innerHTML = `&lt;canvas id=&quot;canvas&quot; widht=&quot;500&quot; height=&quot;500&quot; &gt;&lt;/canvas&gt;`</div><div class=\"line\">var canvas = document.getElementById(&quot;canvas&quot;);</div><div class=\"line\">var ctx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">var gradient = ctx.createLinearGradient(30, 30, 70, 70);</div><div class=\"line\">gradient.addColorStop(0, &apos;white&apos;)</div><div class=\"line\">gradient.addColorStop(1, &apos;black&apos;)</div><div class=\"line\">ctx.fillStyle = gradient;</div><div class=\"line\">ctx.fillRect(30, 30, 50, 50)</div></pre></td></tr></table></figure>\n<ul>\n<li>createRadialGradient(x1, y1, r1, x2, y2, r2)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.body.innerHTML = `&lt;canvas id=&quot;canvas&quot; widht=&quot;500&quot; height=&quot;500&quot; &gt;&lt;/canvas&gt;`</div><div class=\"line\">var canvas = document.getElementById(&quot;canvas&quot;);</div><div class=\"line\">var ctx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">var gradient = ctx.createRadialGradient(30, 30, 10, 30, 30, 30);</div><div class=\"line\">gradient.addColorStop(0, &apos;white&apos;)</div><div class=\"line\">gradient.addColorStop(1, &apos;black&apos;)</div><div class=\"line\">ctx.fillStyle = gradient;</div><div class=\"line\">ctx.fillRect(0, 0, 60, 60)</div></pre></td></tr></table></figure>\n<h3 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h3><ul>\n<li>createPartern(img元素/video元素/其他canvas, repeat/no-repeat/repeat-x/repeat-y)</li>\n</ul>\n<h3 id=\"使用图像数据\"><a href=\"#使用图像数据\" class=\"headerlink\" title=\"使用图像数据\"></a>使用图像数据</h3><ul>\n<li>getImageData(x, y, width, height)</li>\n<li>putImageData(imageData, x, y)</li>\n</ul>\n<h3 id=\"合成\"><a href=\"#合成\" class=\"headerlink\" title=\"合成\"></a>合成</h3><ul>\n<li>globalAlpha 值0-1, 指定绘制的透明度</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.body.innerHTML = `&lt;canvas id=&quot;canvas&quot; widht=&quot;500&quot; height=&quot;500&quot; &gt;&lt;/canvas&gt;`</div><div class=\"line\">var canvas = document.getElementById(&quot;canvas&quot;);</div><div class=\"line\">var ctx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\"></div><div class=\"line\">ctx.globalAlpha = 0.5</div><div class=\"line\"></div><div class=\"line\">var gradient = ctx.createRadialGradient(30, 30, 10, 30, 30, 30);</div><div class=\"line\">gradient.addColorStop(0, &apos;white&apos;)</div><div class=\"line\">gradient.addColorStop(1, &apos;black&apos;)</div><div class=\"line\">ctx.fillStyle = gradient;</div><div class=\"line\">ctx.fillRect(0, 0, 60, 60)</div></pre></td></tr></table></figure>\n<ul>\n<li>globalCompositeOperation 表示绘制的图形怎么和先绘制的图形结合 其值如下<br><img src=\"https://img.alicdn.com/tfs/TB10aVaXgoQMeJjy0FpXXcTxpXa-1944-1444.png\" alt=\"对应的值\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.body.innerHTML = `&lt;canvas id=&quot;canvas&quot; widht=&quot;500&quot; height=&quot;500&quot; &gt;&lt;/canvas&gt;`</div><div class=\"line\">var canvas = document.getElementById(&quot;canvas&quot;);</div><div class=\"line\">var ctx = canvas.getContext(&apos;2d&apos;);var gradient = ctx.createLinearGradient(30, 30, 70, 70);</div><div class=\"line\">gradient.addColorStop(0, &apos;white&apos;)</div><div class=\"line\">gradient.addColorStop(1, &apos;black&apos;)</div><div class=\"line\">ctx.fillStyle = gradient;</div><div class=\"line\">ctx.fillRect(30, 30, 50, 50)</div><div class=\"line\"></div><div class=\"line\">ctx.globalCompositeOperation = &apos;destination-over&apos;</div><div class=\"line\"></div><div class=\"line\">var gradient = ctx.createRadialGradient(30, 30, 10, 30, 30, 30);</div><div class=\"line\">gradient.addColorStop(0, &apos;white&apos;)</div><div class=\"line\">gradient.addColorStop(1, &apos;black&apos;)</div><div class=\"line\">ctx.fillStyle = gradient;</div><div class=\"line\">ctx.fillRect(0, 0, 60, 60)</div></pre></td></tr></table></figure>\n<h2 id=\"WebGL\"><a href=\"#WebGL\" class=\"headerlink\" title=\"WebGL\"></a>WebGL</h2><h3 id=\"类型化数组\"><a href=\"#类型化数组\" class=\"headerlink\" title=\"类型化数组\"></a>类型化数组</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var buffer = new ArrayBuffer(20);</div><div class=\"line\">// 获取大小字节</div><div class=\"line\">var bytes = buffer.byteLength;</div></pre></td></tr></table></figure>\n<h4 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h4><ul>\n<li>DataView(buffer, 开始位置, 要选字节数)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var buffer = new ArrayBuffer(20);</div><div class=\"line\"></div><div class=\"line\">//基于整个缓冲器创建一个视图</div><div class=\"line\">var view = new DataView(buffer)</div><div class=\"line\"></div><div class=\"line\">//创建一个从字节9开始的视图</div><div class=\"line\">var view = new DataView(buffer, 9)</div><div class=\"line\"></div><div class=\"line\">//创建一个从字节9开始到18字节的视图</div><div class=\"line\">var view = new DataView(buffer, 9, 10)</div><div class=\"line\">view.byteOffset; //9</div><div class=\"line\">view.byteLength; //10</div></pre></td></tr></table></figure>\n<ul>\n<li>setter和getter方法 第一个参数是一个字节偏移量, 最后一个参数是布尔值, 表示数据的最低有效位是否保存在高内存地址中<br><img src=\"https://img.alicdn.com/tfs/TB1.8IrXgoQMeJjy1XaXXcSsFXa-1802-1362.png\" alt=\"getter和setter方法\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var buffer = new ArrayBuffer(20);</div><div class=\"line\">var view = new DataView(buffer)</div><div class=\"line\">view.setUnit16(0, 25);</div><div class=\"line\">view.setUnit16(2, 50); //只能从2开始 因为16位占2个字节</div><div class=\"line\">view.getUnit8(0);//0</div><div class=\"line\">view.getUnit8(1);//25</div><div class=\"line\">view.getUnit16(0);//25 一个性取2位, 以0位为高位 00000000 00011001</div><div class=\"line\">view.getUnit16(1);//6400 因为它以1位为高位 00011001 00000000</div><div class=\"line\"></div><div class=\"line\">view.setUnit16(0, 25, true);</div><div class=\"line\">view.getUnit8(0);//25</div><div class=\"line\">view.getUnit8(1);//0</div></pre></td></tr></table></figure>\n<h4 id=\"类型化视图\"><a href=\"#类型化视图\" class=\"headerlink\" title=\"类型化视图\"></a>类型化视图</h4><ul>\n<li>类型化数组 第一个参数为ArrayBuffer对象, 第二个参数为起点字节偏移量, 第三个参数包含的字节数<br><img src=\"https://img.alicdn.com/tfs/TB1UFsBXogQMeJjy0FiXXXhqXXa-796-462.png\" alt=\"类型化数组\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var buffer = new ArrayBuffer(20);</div><div class=\"line\">var int8s = new Int8Array(buffer)</div><div class=\"line\">//从字节4开始</div><div class=\"line\">var int16s = new Int16Array(buffer, 4)</div><div class=\"line\">//从字节4到8字节</div><div class=\"line\">var int16s = new Uint16Array(buffer, 4, 5)</div></pre></td></tr></table></figure>\n<ul>\n<li>不用先创建ArrayBuffer</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//创建10个8位整数(10字节)</div><div class=\"line\">var int8s = new Int8Array(10)</div><div class=\"line\">//创建10个16位整数(20字节)</div><div class=\"line\">var int8s = new Int16Array(10)</div><div class=\"line\"></div><div class=\"line\">//直接创建一个数组 保存4个8位整数</div><div class=\"line\">var int8s = new Int8Array([1, 2, 3, 4]) //[1, 2, 3, 4]</div><div class=\"line\">//越界</div><div class=\"line\">var int8s = new Int8Array([1, 2, 129, 4])// [1, 2, -127, 4]</div></pre></td></tr></table></figure>\n<ul>\n<li>subarray(开始元素的索引, 可选的结束索引) 基于底层数组缓冲器的子集创建一个新视图</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var u = new Int16Array(10)</div><div class=\"line\">u.subarray(2, 5)</div></pre></td></tr></table></figure>\n<h4 id=\"webgl上下文\"><a href=\"#webgl上下文\" class=\"headerlink\" title=\"webgl上下文\"></a>webgl上下文</h4><ul>\n<li>getContext(“webgl”, 参数如下)</li>\n</ul>\n<p><img src=\"https://img.alicdn.com/tfs/TB1xr3vXmFRMKJjy0FhXXX.xpXa-1818-518.png\" alt=\"webgl参数\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.body.innerHTML = `&lt;canvas id=&quot;canvas&quot; widht=&quot;500&quot; height=&quot;500&quot; &gt;&lt;/canvas&gt;`</div><div class=\"line\">var canvas = document.getElementById(&quot;canvas&quot;);</div><div class=\"line\">var gl = canvas.getContext(&quot;webgl&quot;, &#123;alpha: false&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"准备绘图\"><a href=\"#准备绘图\" class=\"headerlink\" title=\"准备绘图\"></a>准备绘图</h4><blockquote>\n<p>先用实色清除cavas, 为绘图做准备</p>\n</blockquote>\n<ul>\n<li>clearColor(r, g, b, o) 每个参数的值在0-1之间</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.body.innerHTML = `&lt;canvas id=&quot;canvas&quot; widht=&quot;500&quot; height=&quot;500&quot; &gt;&lt;/canvas&gt;`</div><div class=\"line\">var canvas = document.getElementById(&quot;canvas&quot;);</div><div class=\"line\">var gl = canvas.getContext(&apos;webgl&apos;);</div><div class=\"line\">//设置颜色</div><div class=\"line\">gl.clearColor(0, 0, 0, 1)</div><div class=\"line\">//使用上面定义的颜色清楚</div><div class=\"line\"></div><div class=\"line\">#### 视口与坐标</div><div class=\"line\"></div><div class=\"line\">&gt; 视口坐标定义是以左下角为坐标原点; 视口内部的坐标系是以中心为原点, 右上是(1, 1), 左下为(-1, -1)</div><div class=\"line\"></div><div class=\"line\">- viewport(x, y, width, height)</div><div class=\"line\">gl.clear(gl.COLOR_BUFFER_BIT)</div></pre></td></tr></table></figure>\n<h4 id=\"缓冲区\"><a href=\"#缓冲区\" class=\"headerlink\" title=\"缓冲区\"></a>缓冲区</h4><blockquote>\n<p>顶点信息保存在JavaScript的类型化数组中, 使用之前必须先转换到WebGL的缓冲区; 在页面重载之前, 缓冲区始终保持在内存中, 或是调用<code>gl.deleteBuffer(buffer)</code>释放内存</p>\n</blockquote>\n<ul>\n<li>bufferData 最后一个参数如下<ul>\n<li>gl.STATIC_DRAW 数据只加载一次, 在多次绘图中使用</li>\n<li>gl.STREAM_DRAW 数据只加载一次, 在几次绘图中使用</li>\n<li>gl.DYNAMIC_DRAW 数据动态改变, 在多次绘图中使用</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var buffer = gl.createBuffer();</div><div class=\"line\">//将buffer与webgl上下文绑定</div><div class=\"line\">gl.bindBuffer(gl.ARRAY_BUFFER, buffer);</div><div class=\"line\">gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0.5, 1]), gl.STATIC_DRAW);</div><div class=\"line\">gl.deleteBuffer(buffer);</div></pre></td></tr></table></figure>\n<h4 id=\"错误\"><a href=\"#错误\" class=\"headerlink\" title=\"错误\"></a>错误</h4><blockquote>\n<p>webgl 不会主动抛出错误, 需要通过<code>getError()</code>方法获取</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var error = gl.getError();</div><div class=\"line\">console.log(error)</div></pre></td></tr></table></figure>\n<h4 id=\"着色器\"><a href=\"#着色器\" class=\"headerlink\" title=\"着色器\"></a>着色器</h4><blockquote>\n<p>用的是GLSL语言, 一种类C语言<br>webgl有两种着色器: 顶点着色器和片段着色器 顶点着色器将3D顶点转换为需要渲染的2D. 片段着色器用于准备计算要绘制的每个像素颜色<br>为着色器传递数据的方式有两种: Attribute和Uniform</p>\n</blockquote>\n<ul>\n<li>Attribute 向顶点着色器传入顶点信息</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 定义了一个类型为vec2的aVertexPosition变量名</div><div class=\"line\">attribute vec2 aVertexPosition;</div><div class=\"line\">void main() &#123;</div><div class=\"line\">\t//转换为3D  vec4 表示接受4个值 aVertexPosition是vec2类型 所有算2个值</div><div class=\"line\">\tgl_position = vec4(aVertexPosition, 0.0, 1.0);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Uniform 可以向任何着色器传入常量值</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//</div><div class=\"line\">uniform vec4 uColor;</div><div class=\"line\">void main() &#123;</div><div class=\"line\">\t//绘图时的颜色</div><div class=\"line\">\tgl_FragColor = uColor;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"编写着色器程序\"><a href=\"#编写着色器程序\" class=\"headerlink\" title=\"编写着色器程序\"></a>编写着色器程序</h4><blockquote>\n<p>因为浏览器不识别GLSL语法, 所以需要将其变成字符串进行转换</p>\n</blockquote>\n<ul>\n<li>gl.createShader(gl.VERTEX_SHADER/gl.FRAGMENT_SHADER)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;x-webgl/x-vertex-shader&quot; id=&quot;vertexShader&quot;&gt;</div><div class=\"line\">attribute vec2 aVertexPosition;</div><div class=\"line\">void main() &#123;</div><div class=\"line\">\t//转换为3D  vec4 表示接受4个值 aVertexPosition是vec2类型 所有算2个值</div><div class=\"line\">\tgl_position = vec4(aVertexPosition, 0.0, 1.0);</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">var vertexShaderText = document.getElementById(&quot;vertexShader&quot;).text;</div><div class=\"line\">var vertexShader = gl.createShader(gl.VERTEX_SHADER)</div><div class=\"line\">gl.shaderSource(vertexShader, vertexShaderText);</div><div class=\"line\">gl.compileShader(vertexShader)</div><div class=\"line\"></div><div class=\"line\">&lt;script type=&quot;x-webgl/x-fragment-shader&quot; id=&quot;fragmentShader&quot;&gt;</div><div class=\"line\">attribute vec2 aVertexPosition;</div><div class=\"line\">void main() &#123;</div><div class=\"line\">\t//转换为3D  vec4 表示接受4个值 aVertexPosition是vec2类型 所有算2个值</div><div class=\"line\">\tgl_position = vec4(aVertexPosition, 0.0, 1.0);</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">var fragmentShaderText = document.getElementById(&quot;fragmentShader&quot;).text;</div><div class=\"line\">var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)</div><div class=\"line\">gl.shaderSource(fragmentShader, fragmentShaderText);</div><div class=\"line\">gl.compileShader(fragmentShader)</div><div class=\"line\"></div><div class=\"line\">//创建程序</div><div class=\"line\">var program = gl.createProgram()</div><div class=\"line\">gl.attachShader(program, vertexShader);</div><div class=\"line\">gl.attachShader(program, fragmentShader);</div><div class=\"line\">//将两个对象链接到着色器程序中</div><div class=\"line\">gl.linkProgram(program)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//通知webgl使用这个程序</div><div class=\"line\">gl.useProgram(program);</div></pre></td></tr></table></figure>\n<h4 id=\"为着色器传入值\"><a href=\"#为着色器传入值\" class=\"headerlink\" title=\"为着色器传入值\"></a>为着色器传入值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">//找到内存地址</div><div class=\"line\">var uColor = gl.getUniformLocation(program, &quot;uColor&quot;);</div><div class=\"line\">//给uColor赋值</div><div class=\"line\">gl.uniform4fv(uColor, [0, 0, 0, 1]);</div><div class=\"line\"></div><div class=\"line\">//找到attribute在内存中的位置</div><div class=\"line\">var aVertexPosition = gl.getAttribLocation(program, &quot;aVertexPosition&quot;);</div><div class=\"line\">//启用</div><div class=\"line\">gl.enableVertexAttribArray(aVertexPosition);</div><div class=\"line\">//创建指针, 指向gl.bindBuffer()指定的缓冲区, 并将其保存在aVertexPosition中, 以便顶点着色器使用</div><div class=\"line\">gl.vertextAttribPointer(aVertexPosition, itemSize, gl.FLOAT, false, 0 , 0);</div></pre></td></tr></table></figure>\n<h4 id=\"调试着色器和程序\"><a href=\"#调试着色器和程序\" class=\"headerlink\" title=\"调试着色器和程序\"></a>调试着色器和程序</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//编译成功返回true 否则返回false</div><div class=\"line\">if (! gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) &#123;</div><div class=\"line\">\t//获取错误信息</div><div class=\"line\">\talert(gl.getShaderInfoLog(vertexShader));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"绘图\"><a href=\"#绘图\" class=\"headerlink\" title=\"绘图\"></a>绘图</h4><blockquote>\n<p>webgl只能绘制3种形状: 点, 线和三角</p>\n</blockquote>\n<ul>\n<li>gl.drawArrays() 数组缓冲区</li>\n<li>gl.drawElements 元素数组缓冲区<br><img src=\"https://img.alicdn.com/tfs/TB1IRGuawoQMeJjy0FnXXb8gFXa-2022-1360.png\" alt=\"第一个参数选项\"></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">\t&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">\t&lt;title&gt;Document&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">\t&lt;canvas id=&quot;canvas&quot; widht=&quot;500&quot; height=&quot;500&quot; &gt;&lt;/canvas&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;script type=&quot;x-webgl/x-vertex-shader&quot; id=&quot;vertexShader&quot;&gt;</div><div class=\"line\">attribute vec2 aVertexPosition;</div><div class=\"line\">void main() &#123;</div><div class=\"line\">\t//转换为3D  vec4 表示接受4个值 aVertexPosition是vec2类型 所有算2个值</div><div class=\"line\">\tgl_position = vec4(aVertexPosition, 0.0, 1.0);</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;script type=&quot;x-webgl/x-fragment-shader&quot; id=&quot;fragmentShader&quot;&gt;</div><div class=\"line\">attribute vec2 aVertexPosition;</div><div class=\"line\">void main() &#123;</div><div class=\"line\">\t//转换为3D  vec4 表示接受4个值 aVertexPosition是vec2类型 所有算2个值</div><div class=\"line\">\tgl_position = vec4(aVertexPosition, 0.0, 1.0);</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">var canvas = document.getElementById(&quot;canvas&quot;);</div><div class=\"line\">var gl = canvas.getContext(&apos;webgl&apos;);</div><div class=\"line\">var vertexShaderText = document.getElementById(&quot;vertexShader&quot;).text;</div><div class=\"line\">var vertexShader = gl.createShader(gl.VERTEX_SHADER)</div><div class=\"line\">gl.shaderSource(vertexShader, vertexShaderText);</div><div class=\"line\">gl.compileShader(vertexShader)</div><div class=\"line\"></div><div class=\"line\">var fragmentShaderText = document.getElementById(&quot;fragmentShader&quot;).text;</div><div class=\"line\">var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)</div><div class=\"line\">gl.shaderSource(fragmentShader, fragmentShaderText);</div><div class=\"line\">gl.compileShader(fragmentShader)</div><div class=\"line\"></div><div class=\"line\">//创建程序</div><div class=\"line\">var program = gl.createProgram()</div><div class=\"line\">gl.attachShader(program, vertexShader);</div><div class=\"line\">gl.attachShader(program, fragmentShader);</div><div class=\"line\">//将两个对象链接到着色器程序中</div><div class=\"line\">gl.linkProgram(program)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//通知webgl使用这个程序</div><div class=\"line\">gl.useProgram(program);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">var vertices = new Float32Array([0, 1, 1, -1, -1, -1]),</div><div class=\"line\">buffer = gl.createBuffer(),</div><div class=\"line\">vertexSetSize = 2,</div><div class=\"line\">vertexSetCount = vertices.length / vertexSetSize,</div><div class=\"line\">uColor, aVertexPosition;</div><div class=\"line\"></div><div class=\"line\">//数据放到缓冲区</div><div class=\"line\">gl.bindBuffer(gl.ARRAY_BUFFER, buffer);</div><div class=\"line\">gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);</div><div class=\"line\"></div><div class=\"line\">//为片段着色器传入颜色值</div><div class=\"line\">uColor = gl.getUniformLocation(program, &quot;uColor&quot;);</div><div class=\"line\">gl.uniform4fv(uColor, [0, 0, 0, 1]);</div><div class=\"line\"></div><div class=\"line\">//为着色器传入顶点信息</div><div class=\"line\">aVertexPosition = gl.getAttribLocation(program, &quot;aVertexPosition&quot;);</div><div class=\"line\">gl.enableVertexAttribArray(aVertexPosition);</div><div class=\"line\">gl.vertexAttribPointer(aVertexPosition, vertexSetSize, gl.FLOAT, false, 0, 0);</div><div class=\"line\"></div><div class=\"line\">//绘制三角形</div><div class=\"line\">gl.drawArrays(gl.TRIANGLES, 0, vertexSetCount);</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n"}