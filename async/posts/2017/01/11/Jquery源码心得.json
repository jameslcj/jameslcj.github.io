{"tags":[{"name":"JavaScript","permalink":"http://blog.hellolc.com,http://www.wjcun.com/tags/JavaScript/","url":"/async/tags/JavaScript.json","count":7},{"name":"Jquery","permalink":"http://blog.hellolc.com,http://www.wjcun.com/tags/Jquery/","url":"/async/tags/Jquery.json","count":1}],"categories":[],"url":"/async/posts/2017/01/11/Jquery源码心得.json","date":1484134697000,"path":{"year":2017,"month":1,"day":11,"name":"Jquery源码心得"},"title":"jquery源码心得","permalink":"http://blog.hellolc.com,http://www.wjcun.com/2017/01/11/Jquery源码心得/","content":"<h1 id=\"阅读jquery源码心得\"><a href=\"#阅读jquery源码心得\" class=\"headerlink\" title=\"阅读jquery源码心得\"></a>阅读jquery源码心得</h1><ul>\n<li>闭包参数传递window, 是为了寻找window时, 不用寻找到外层, 提高效率, 也为压缩代码提供了方便</li>\n<li>闭包声明undefined, 但不赋值, 就是让underfined == ‘underfined’ 防止ie9一下的浏览器 修改其值</li>\n<li>jquery = function(selector,…) {return new jquery.property.init()} 这样做是做了 我们平时$()时 就能执行init里的方法; 不用每次都要先调用init; 如何实现? jquery.property.init.property = jquery.property; 这样init 不仅有自身方法也有jquery的所有方法</li>\n<li>null 只与 null和undefined 相等, 其他都是false</li>\n<li>typeof Nan == ‘number’ 所以要用isNan 和 isFinite 来判断是不是数字</li>\n<li>判断类型建议使用 [].toString.call(new Date)  {}.toString.call(new Date) 获取更新详细的结果</li>\n<li>obj.constructor.prototype.hasOwnProperty(‘isPrototypeOf’) 对象独有的属性</li>\n</ul>\n<h3 id=\"mouseover-mousein-结构嵌套时冒泡解决方法\"><a href=\"#mouseover-mousein-结构嵌套时冒泡解决方法\" class=\"headerlink\" title=\"mouseover mousein 结构嵌套时冒泡解决方法\"></a>mouseover mousein 结构嵌套时冒泡解决方法</h3><ul>\n<li>mouseover mousein 在结构嵌套的时候会有冒泡传递事件影响有些需求事件, 可以换成mouseleave mouseenter</li>\n<li>其他解决方法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//解决方法</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var oDiv1 = document.getElementById(&apos;div1&apos;);</span><br><span class=\"line\">var oDiv2 = document.getElementById(&apos;div2&apos;);</span><br><span class=\"line\">var oSpan1 = document.getElementById(&apos;span1&apos;);</span><br><span class=\"line\">oDiv1.onmouseover = function(ev)&#123;</span><br><span class=\"line\">\tvar ev = ev || window.event;</span><br><span class=\"line\">\tvar a = this;</span><br><span class=\"line\">\tvar b = ev.relatedTarget;</span><br><span class=\"line\">\tif( !elContains(a, b) &amp;&amp; a!=b )&#123;</span><br><span class=\"line\">\t\toSpan1.innerHTML += &apos;1&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">oDiv1.onmouseout = function(ev)&#123;</span><br><span class=\"line\">\tvar ev = ev || window.event;</span><br><span class=\"line\">\tvar a = this;</span><br><span class=\"line\">\tvar b = ev.relatedTarget;</span><br><span class=\"line\">\tif( !elContains(a, b) &amp;&amp; a!=b )&#123;</span><br><span class=\"line\">\t\toSpan1.innerHTML += &apos;2&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">function elContains(a, b)&#123;  //两个元素是否是嵌套关系</span><br><span class=\"line\">\treturn a.contains ? a != b &amp;&amp; a.contains(b) : !!(a.compareDocumentPosition(b) &amp; 16);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">#div1&#123; width:200px; height:200px; background:red;&#125;</span><br><span class=\"line\">#div2&#123; width:100px; height:100px; background:yellow;&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=&quot;div1&quot;&gt;</span><br><span class=\"line\">\t&lt;div id=&quot;div2&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;span id=&quot;span1&quot;&gt;11111111111&lt;/span&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"trigger-与-triggerHandler的区别\"><a href=\"#trigger-与-triggerHandler的区别\" class=\"headerlink\" title=\"trigger() 与 triggerHandler的区别\"></a>trigger() 与 triggerHandler的区别</h3><ul>\n<li>trigger 会触发对应事件的回调函数, 并且触发事件的默认行为(比如focus 光标会获取焦点)</li>\n<li>triggerHandler 会触发对应事件的回调函数, 但不会触发事件的默认行为<h3 id=\"prop-与-attr的区别\"><a href=\"#prop-与-attr的区别\" class=\"headerlink\" title=\"$().prop 与 $().attr的区别\"></a><code>$().prop</code> 与 <code>$().attr</code>的区别</h3></li>\n<li><code>$(&quot;#id&quot;).prop</code> 实现的原理是<ul>\n<li>设置值时: <code>document.getElementById(&#39;id&#39;)[&#39;name&#39;] = &#39;name&#39;</code></li>\n<li>获取值时: <code>document.getElementById(&#39;id&#39;)[&#39;name&#39;]</code></li>\n</ul>\n</li>\n<li><code>$(&quot;#id&quot;).attr</code> 实现的原理是<ul>\n<li>设置值时: <code>document.getElementById(&#39;id&#39;).setAttribute = &#39;name&#39;</code></li>\n<li>获取值时: <code>document.getElementById(&#39;id&#39;).getAttribute</code></li>\n</ul>\n</li>\n<li>当对document等对象(没有setAttrite方法), 建议使用prop(jquery做了兼容)</li>\n<li>当获取自定义或者设置自定义属性时, prop在某些浏览器上无法实现</li>\n<li>removeProp在某些浏览器上无法删除原生属性</li>\n</ul>\n<h3 id=\"浏览器内存泄漏\"><a href=\"#浏览器内存泄漏\" class=\"headerlink\" title=\"浏览器内存泄漏\"></a>浏览器内存泄漏</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var div1 = document.getElementById(&apos;div&apos;)[0];</span><br><span class=\"line\">var div2 = document.getElementById(&apos;div&apos;)[1];</span><br><span class=\"line\">div1.name = div2;</span><br><span class=\"line\">div2.name = div1;</span><br></pre></td></tr></table></figure>\n<h3 id=\"的-attr-prop-data3个方法的区别\"><a href=\"#的-attr-prop-data3个方法的区别\" class=\"headerlink\" title=\"$的 attr, prop, data3个方法的区别\"></a>$的 attr, prop, data3个方法的区别</h3><ul>\n<li>data不会有浏览器内存泄漏, 其他2个会有</li>\n<li>data适合挂载大量数据</li>\n<li>data是利用一个中间件将对象和属性联系起来的, 不是直接将属性挂载在对象上, 这样就避免了内存泄漏, 和挂载大量数据时影响效率</li>\n</ul>\n"}